# XML-like syntax where nesting is indicated by indentation only:
# https://docutils.sourceforge.io/docs/ref/doctree.html#pseudo-xml
name: "Docutils pseudo-XML"
scopeName: "text.pseudoxml"
fileTypes: ["pseudoxml"]
firstLineMatch: '^<document [^>]*(?<= )source="[^"]+.rst"(?= |>)[^>]*>$'
patterns: [include: "#main"]
injections:
	"meta.text.fragment.pseudoxml string.quoted.single": patterns: [include: "#esc-quote-single"]
	"meta.text.fragment.pseudoxml string.quoted.double": patterns: [include: "#esc-quote-double"]
	"meta.text.fragment.pseudoxml string.quoted":
		patterns: [
			{include: "#esc-codepoint"}
			{include: "#esc-named"}
		]

repository:
	main:
		patterns: [
			{include: "#node"}
			{include: "#text"}
			{include: "#comment"}
		]


	# Node attribute
	attr:
		patterns: [
			{include: "#attr-quoted"}
			{include: "#attr-unquoted"}
			{include: "#attr-boolean"}
		]


	# Attribute without a value
	# See: https://developer.mozilla.org/en-US/docs/Glossary/Boolean/HTML
	"attr-boolean":
		name:  "meta.attribute.without-value.pseudoxml"
		match: "(?:\\G|^|(?<=\\s))([^\\s<>\"'=]+)(?=\\s*>|\\s+[^\\s<>=])"
		captures:
			1: name: "entity.other.attribute-name.pseudoxml"


	# Quoted attribute
	"attr-quoted":
		name:  "meta.attribute.with-value.quoted.pseudoxml"
		begin: "(?:\\G|^|(?<=\\s))([^\\s<>\"'=]+)\\s*(=)\\s*(?=\"|')"
		end:   "(?!\\G)"
		beginCaptures:
			1: name: "entity.other.attribute-name.pseudoxml"
			2: patterns: [include: "#punct"]
		patterns: [include: "#str"]


	# Unquoted attribute
	"attr-unquoted":
		name:  "meta.attribute.with-value.unquoted.pseudoxml"
		begin: "(?:\\G|^|(?<=\\s))([^\\s<>\"'=]+)\\s*(=)\\s*(?=[^\\s\"'<>])"
		end:   "(?=\\s\"'<>)"
		contentName: "string.unquoted.pseudoxml"
		beginCaptures:
			1: name: "entity.other.attribute-name.pseudoxml"
			2: patterns: [include: "#punct"]


	# Bogus XML-style comments supported for the benefit of editors
	# (NB: There's a distinction between a “<comment>” node represented by a rendered
	# document tree, and one intended to be transparent to whatever's parsing it…)
	comment:
		name:  "comment.block.pseudoxml"
		begin: "^[ \\t]*(<!--)"
		end:   "-->"
		beginCaptures: 1: name: "punctuation.definition.comment.begin.pseudoxml"
		endCaptures:   0: name: "punctuation.definition.comment.end.pseudoxml"


	# Highlight a line of ordinary text as an error, excluding its indentation
	error:
		contentName: "invalid.illegal.message.error.pseudoxml"
		begin: "^[ \\t]+(?=[^\\s<])"
		end:   "$"


	# Characters specified by hexadecimal (or octal) codepoint
	"esc-codepoint":
		patterns: [{
			# 2-digit codepoint: \xHH
			name: "constant.character.entity.2-digit.hexadecimal.hex.pseudoxml"
			match: "(\\\\)x([A-Fa-f0-9]{2})"
			captures:
				1: patterns: [include: "#punct"]
		},{
			# 4-digit codepoint: \uHHHH
			name: "constant.character.entity.4-digit.hexadecimal.hex.pseudoxml"
			match: "(\\\\)u[A-Fa-f0-9]{4}"
			captures:
				1: patterns: [include: "#punct"]
		},{
			# 8-digit codepoint: \UHHHHHHHH
			name: "constant.character.entity.8-digit.hexadecimal.hex.pseudoxml"
			match: "(\\\\)U[A-Fa-f0-9]{8}"
			captures:
				1: patterns: [include: "#punct"]
		},{
			# Variable-length octal codepoint: \OOO
			name: "constant.character.entity.octal.oct.pseudoxml"
			match: "(\\\\)[0-7]{1,3}"
			captures:
				1: patterns: [include: "#punct"]
		}]


	# C-style, single-character escape sequence
	"esc-named":
		name: "constant.character.named.escape.pseudoxml"
		match: "(\\\\)[\\\\abfnrtv]"
		captures:
			1: patterns: [include: "#punct"]


	# Escaped quote character
	"esc-quote":
		patterns: [
			{include: "#esc-quote-double"}
			{include: "#esc-quote-single"}
		]


	# Escaped double-quote
	"esc-quote-double":
		name: "constant.character.quote.escape.double.pseudoxml"
		match: '(\\\\)"'
		captures:
			1: patterns: [include: "#punct"]


	# Escaped single-quote
	"esc-quote-single":
		name: "constant.character.quote.escape.single.pseudoxml"
		match: "(\\\\)'"
		captures:
			1: patterns: [include: "#punct"]


	# Single-line node description
	node:
		patterns: [
			{include: "#node-comment"}
			{include: "#node-sysmsg"}
			{include: "#node-strong"}
			{include: "#node-emphasis"}
			{include: "#node-literal"}
			{include: "#node-problematic"}
			{include: "#node-other"}
		]


	# An actual “<comment>” node representing a reStructuredText comment.
	# NB: Not to be confused with the bogus <!-- XML-flavoured --> comments
	# that are unofficially supported by this grammar.
	"node-comment":
		name:  "meta.element.node.comment.pseudoxml"
		begin: "^([ \\t]*)((<)(comment)(\\s+[^<>]+)?\\s*(>))[ \\t]*$"
		end:   "^(?!\\s*$|\\1(?:\\t+| {2,})\\S)"
		beginCaptures:
			2: name: "meta.tag.pseudoxml"
			3: patterns: [include: "#punct"]
			4: name: "entity.name.tag.node.pseudoxml"
			5: patterns: [include: "#attr"]
			6: patterns: [include: "#punct"]
		contentName: "comment.block.element.pseudoxml"
		patterns: [include: "#main"]


	# Moderately-emphasised text, typically italicised
	"node-emphasis":
		name:  "meta.element.node.emphasis.pseudoxml"
		begin: "(?i)^([ \\t]*)((<)(emphasis)(\\s+[^<>]+)?\\s*(>))[ \\t]*$"
		end:   "^(?!\\s*$|\\1(?:\\t+| {2,})\\S)"
		beginCaptures:
			2: name: "meta.tag.pseudoxml"
			3: patterns: [include: "#punct"]
			4: name: "entity.name.tag.node.pseudoxml"
			5: patterns: [include: "#attr"]
			6: patterns: [include: "#punct"]
		contentName: "markup.italic.emphasis.pseudoxml"
		patterns: [include: "#main"]


	# Nodes containing monospaced/fixed-pitch text
	"node-literal":
		name:  "meta.element.node.monospaced-text.pseudoxml"
		begin: "(?i)^([ \\t]*)((<)(literal(?:_block)?)(\\s+[^<>]+)?\\s*(>))[ \\t]*$"
		end:   "^(?!\\s*$|\\1(?:\\t+| {2,})\\S)"
		beginCaptures:
			2: name: "meta.tag.pseudoxml"
			3: patterns: [include: "#punct"]
			4: name: "entity.name.tag.node.pseudoxml"
			5: patterns: [include: "#attr"]
			6: patterns: [include: "#punct"]
		contentName: "markup.raw.monospace.literal.pseudoxml"
		patterns: [include: "#main"]


	# Any other Doctree element, recognised or not
	"node-other":
		name:  "meta.element.node.${4:/downcase}.pseudoxml"
		begin: "^([ \\t]*)((<)([-\\w:]+)(\\s+[^<>]+)?\\s*(>))[ \\t]*$"
		end:   "^(?!\\s*$|\\1(?:\\t+| {2,})\\S)"
		beginCaptures:
			2: name: "meta.tag.pseudoxml"
			3: patterns: [include: "#punct"]
			4: name: "entity.name.tag.node.pseudoxml"
			5: patterns: [include: "#attr"]
			6: patterns: [include: "#punct"]
		patterns: [include: "#main"]


	# Strongly-emphasised text, typically displayed in bold
	"node-strong":
		name:  "meta.element.node.strong.pseudoxml"
		begin: "(?i)^([ \\t]*)((<)(strong)(\\s+[^<>]+)?\\s*(>))[ \\t]*$"
		end:   "^(?!\\s*$|\\1(?:\\t+| {2,})\\S)"
		beginCaptures:
			2: name: "meta.tag.pseudoxml"
			3: patterns: [include: "#punct"]
			4: name: "entity.name.tag.node.pseudoxml"
			5: patterns: [include: "#attr"]
			6: patterns: [include: "#punct"]
		contentName: "markup.bold.emphasis.strong.pseudoxml"
		patterns: [include: "#main"]


	# Diagnostic message, including warnings and errors
	"node-sysmsg":
		patterns: [
			{include: "#node-sysmsg-error"}
			{include: "#node-sysmsg-warning"}
		]


	# Level-3+ ("ERROR" and "SEVERE") messages
	"node-sysmsg-error":
		name: "meta.element.node.system-message.error.pseudoxml"
		begin: """(?ix)^([ \\t]*)((<)((system_message))(?=
			\\s+ [^<>]*? (?<=\\s)
			(?: level \\s* = \\s* ("|'|\\b) (?:[3-9]|[1-9]+[0-9]+) \\6
			|    type \\s* = \\s* ("|'|\\b) (?:ERROR|SEVERE)       \\7
			)
		) (\\s+[^<>]+) \\s* (>)) [ \\t]*$"""
		end: "^(?!\\s*$|\\1(?:\\t+| {2,})\\S)"
		beginCaptures:
			2: name: "meta.tag.pseudoxml"
			3: patterns: [include: "#punct"]
			4: name: "entity.name.tag.node.pseudoxml"
			5: name: "sublimelinter.mark.error.invalid"
			8: patterns: [include: "#attr"]
			9: patterns: [include: "#punct"]
		patterns: [{
			# Call attention to the contents of the error message
			name:  "meta.element.node.paragraph.error-message.pseudoxml"
			begin: "^([ \\t]+)((<)(paragraph)(\\s+[^<>]+)?\\s*(>))[ \\t]*$"
			end:   "^(?!\\s*$|\\1(?:\\t+| {2,})\\S)"
			beginCaptures:
				2: name: "meta.tag.pseudoxml"
				3: patterns: [include: "#punct"]
				4: name: "entity.name.tag.node.pseudoxml"
				5: patterns: [include: "#attr"]
				6: patterns: [include: "#punct"]
			contentName: "message.error.invalid.pseudoxml"
			patterns: [
				{include: "#error"}
				{include: "#main"}
			]
		}, include: "#main"]


	# Level-2/warning messages
	"node-sysmsg-warning":
		name: "meta.element.node.system-message.warning.pseudoxml"
		begin: """(?ix)^([ \\t]*)((<)((system_message))(?=
			\\s+ [^<>]*? (?<=\\s)
			(?: level \\s* = \\s* ("|'|\\b) 2       \\6
			|    type \\s* = \\s* ("|'|\\b) WARNING \\7
			)
		) (\\s+[^<>]+) \\s* (>)) [ \\t]*$"""
		end: "^(?!\\s*$|\\1(?:\\t+| {2,})\\S)"
		beginCaptures:
			2: name: "meta.tag.pseudoxml"
			3: patterns: [include: "#punct"]
			4: name: "entity.name.tag.node.pseudoxml"
			5: name: "sublimelinter.mark.warning.invalid"
			8: patterns: [include: "#attr"]
			9: patterns: [include: "#punct"]
		contentName: "sublimelinter.mark.warning.invalid"
		patterns: [include: "#main"]


	# “Problematic” user input
	"node-problematic":
		name:  "meta.element.node.problematic.error.pseudoxml"
		begin: "^([ \\t]*)((<)((problematic))(\\s+[^<>]+)?\\s*(>))[ \\t]*$"
		end:   "^(?!\\s*$|\\1(?:\\t+| {2,})\\S)"
		beginCaptures:
			2: name: "meta.tag.pseudoxml"
			3: patterns: [include: "#punct"]
			4: name: "entity.name.tag.node.pseudoxml"
			5: name: "sublimelinter.mark.error.invalid"
			6: patterns: [include: "#attr"]
			7: patterns: [include: "#punct"]
		contentName: "message.error.invalid.pseudoxml"
		patterns: [
			{include: "#error"}
			{include: "#main"}
		]


	# Punctuation that isn't an apostrophe or double-quote 
	punct:
		patterns: [{
			# Backslash, tokenised as part of an escape sequence
			name: "punctuation.definition.escape.backslash.pseudoxml"
			match: "\\\\"
		},{
			# Opening bracket
			name: "punctuation.definition.tag.begin.pseudoxml"
			match: "<"
			captures:
				0: name: "sublimelinter.gutter-mark"
		},{
			# Closing bracket
			name: "punctuation.definition.tag.end.pseudoxml"
			match: ">"
			captures:
				0: name: "sublimelinter.gutter-mark"
		},{
			# Attribute name/value separator
			name: "keyword.operator.assignment.attribute.pseudoxml"
			match: "="
			captures:
				0: name: "punctuation.separator.key-value.pseudoxml"
		}]


	# Quoted string matched in lookahead
	str:
		patterns: [
			{include: "#str-double"}
			{include: "#str-single"}
		]


	# "Double-quoted" string
	"str-double":
		name:  "string.quoted.double.pseudoxml"
		begin: '\\G"'
		end:   '(")|([^<>"]*+)(?=>|$)'
		beginCaptures:
			0: name: "punctuation.definition.string.begin.pseudoxml"
		endCaptures:
			1: name: "punctuation.definition.string.end.pseudoxml"
			2: name: "invalid.illegal.unclosed.string.pseudoxml"


	# 'Single-quoted' string
	"str-single":
		name:  "string.quoted.single.pseudoxml"
		begin: "\\G'"
		end:   "(')|([^<>']*+)(?=>|$)"
		beginCaptures:
			0: name: "punctuation.definition.string.begin.pseudoxml"
		endCaptures:
			1: name: "punctuation.definition.string.end.pseudoxml"
			2: name: "invalid.illegal.unclosed.string.pseudoxml"


	# Text node, emitted when `--detailed` option is passed
	text:
		name:  "meta.text.node.pseudoxml"
		begin: "^([ \\t]*)((<)(#text))(>)[ \\t]*$"
		end:   "^(?!\\s*$|\\1(?:\\t+| {2,})\\S)"
		beginCaptures:
			2: name: "meta.tag.pseudoxml"
			4: name: "markup.list.strings.pseudoxml"
			3: patterns: [include: "#punct"]
			5: patterns: [include: "#punct"]
		patterns: [{
			name:  "meta.text.fragment.pseudoxml"
			begin: "^[ \\t]+(?='|\")"
			end:   "(?!\\G)"
			patterns: [include: "#str"]
		}]
