name: "reStructuredText"
scopeName: "text.restructuredtext"
fileTypes: ["rst", "rest"]
patterns: [ include: "#all" ]
limitLineLength: no
firstLineMatch: """(?x)
	# Emacs modeline
	-\\*-(?i:[ \\t]*(?=[^:;\\s]+[ \\t]*-\\*-)|(?:.*?[ \\t;]|(?<=-\\*-))[ \\t]*mode[ \\t]*:[ \\t]*)
		(?i:rst)
	(?=[ \\t;]|(?<![-*])-\\*-).*?-\\*-

	|

	# Vim modeline
	(?:(?:^|[ \\t])(?:vi|Vi(?=m))(?:m[<=>]?[0-9]+|m)?|[ \\t]ex)(?=:(?=[ \\t]*set?[ \\t][^\\r\\n:]+:)|:(?![ \\t]*set?[ \\t]))
	(?:(?:[ \\t]*:[ \\t]*|[ \\t])\\w*(?:[ \\t]*=(?:[^\\\\\\s]|\\\\.)*)?)*[ \\t:]
	(?:filetype|ft|syntax)[ \\t]*=
		(?i:rst)
	(?=$|\\s|:)
"""
injections:
	"L:meta.numref.restructuredtext":
		patterns: [{
			# printf(3)-style placeholder
			name: "constant.other.placeholder.figure-number.restructuredtext"
			match: "(%)s"
			captures:
				1: name: "punctuation.definition.placeholder.restructuredtext"
		},{
			# “{name}” and “{number}” placeholders
			name: "constant.other.placeholder.figure-$2.restructuredtext"
			match: "({)(name|number)(})"
			captures:
				1: name: "punctuation.definition.placeholder.begin.restructuredtext"
				3: name: "punctuation.definition.placeholder.end.restructuredtext"
		}]

repository:

	all:
		patterns: [
			{include: "#escape"}
			{include: "#line-blocks"}
			{include: "#tables"}
			{include: "#headings"}
			{include: "#substitution-definition"}
			{include: "#directives"}
			{include: "#raw-blocks"}
			{include: "#inlines"}
			{include: "#tag-name"}
			{include: "#doctests"}
			{include: "#domains"}
			{include: "#comments"}
		]


	# Inline elements: formatting, links, citations, etc
	inlines:
		patterns: [
			{include: "#escape"}
			{include: "#emphasis"}
			{include: "#link-definition"}
			{include: "#role"}
			{include: "#substitution"}
			{include: "#literal"}
			{include: "#interpreted-line"}
			{include: "#anonymous-link"}
			{include: "#link-reference"}
			{include: "#interpreted-block"}
			{include: "#footnotes"}
			{include: "#citations"}
		]

	escape:
		match: "\\\\."
		name: "constant.character.escape.backslash.restructuredtext"


	# Path/URL
	uri:
		name: "string.other.uri.restructuredtext"
		match: "\\S+"
		captures: 0: name: "markup.link.underline.restructuredtext"


	# Numeric length values
	length:
		name: "constant.numeric.length.restructuredtext"
		match: "[\\d.]+\\s*(?i:(em|ex|px|in|cm|mm|pt|pc)|(%))?"
		captures:
			1: name: "keyword.other.${1:/downcase}-unit.restructuredtext"
			2: name: "keyword.other.percentile-unit.restructuredtext"


	# Section border
	headings:
		name: "markup.heading.restructuredtext"
		match: "^(([-=~`#\"^+*:.'_])\\2{2,})(?=\\s*$)"
		captures:
			1: name: "punctuation.definition.heading.restructuredtext"


	# Line blocks
	"line-blocks":
		name: "meta.line-block.restructuredtext"
		begin: "^(\\s*)(\\|)(?!.*?(?<=\\S)\\|)"
		end:   "^(?=\\s*$\\n?)"
		beginCaptures:
			2: name: "punctuation.separator.line-block.restructuredtext"
		patterns: [
			{
				match: "^\\s*(\\|)"
				captures:
					1: name: "punctuation.separator.line-block.restructuredtext"
			}

			{include: "#inlines"}
		]


	# Emphasised text: bold/italics
	emphasis:
		patterns: [

			# Bold
			{
				name: "markup.bold.restructuredtext"
				begin: "\\*\\*(?=[^\\*\\s])"
				end:   "\\*\\*|^(?=\\s*$)"
				beginCaptures: 0: "name": "punctuation.definition.bold.begin.restructuredtext"
				endCaptures:   0: "name": "punctuation.definition.bold.end.restructuredtext"
				patterns: [include: "#inlines"]
			}

			# Italic
			{
				name: "markup.italic.restructuredtext"
				begin: "(?<!\\\\)\\*(?=[^\\*\\s])"
				end:   "(?<!\\\\)\\*|^(?=\\s*$)"
				beginCaptures: 0: name: "punctuation.definition.italic.begin.restructuredtext"
				endCaptures:   0: name: "punctuation.definition.italic.end.restructuredtext"
				patterns: [include: "#inlines"]
			}
		]


	# Inline literal
	literal:
		name: "markup.raw.restructuredtext"
		begin: "``"
		end:   "``((?=[^`\\w\\d])|$)"
		beginCaptures: 0: name: "punctuation.definition.raw.begin.restructuredtext"
		endCaptures:   0: name: "punctuation.definition.raw.end.restructuredtext"



	# Intepreted text: Single line
	"interpreted-line":
		name: "markup.other.command.restructuredtext"
		match: "(`)[^`]+(`)(?!_)"
		captures:
			1: name: "punctuation.definition.intepreted.restructuredtext"
			2: name: "punctuation.definition.intepreted.restructuredtext"


	# Anonymous links: url__
	"anonymous-link":
		name: "meta.link.restructuredtext"
		match: "\\s*(__)\\s+(.+)"
		captures:
			1: name: "punctuation.definition.link.restructuredtext"
			2: name: "markup.underline.link.restructuredtext"


	# Stuff matched inside hyperlinks and cross-references
	link:
		patterns: [{
			# :ref:`Title <target>`
			match: "\\G\\s*((?:[^<`\\\\]|\\.)++)?\\s*((<)((?:[^>`\\\\]|\\.)++)(>))\\s*(?=`|$)"
			captures:
				1: patterns: [include: "#link-text"]
				2: name: "meta.link-destination.restructuredtext"
				3: name: "punctuation.definition.angle.bracket.begin.restructuredtext"
				4: name: "constant.other.reference.link.restructuredtext"
				5: name: "punctuation.definition.angle.bracket.end.restructuredtext"
		},{
			# :ref:`target-only`
			match: "\\G\\s*((?:[^`\\\\]|\\.)++)\\s*(?=`|$)"
			captures:
				0: name: "meta.link-destination.restructuredtext"
				1: name: "constant.other.reference.link.restructuredtext"
		}]

	# Pattern rules “clamped” to a fixed-length capturing group, necessary for injections
	"link-text":
		name:  "entity.name.reference.restructuredtext"
		begin: "(?:^|\\G)"
		end:   "$"


	citations:
		patterns: [

			# Replacement
			{
				name: "meta.link.citation.def.restructuredtext"
				match: "^(\\.\\.)\\s+((\\[)[A-z][A-z0-9]*(\\]))(_)\\s+(.*)"
				captures:
					1: name: "punctuation.definition.link.restructuredtext"
					2: name: "constant.other.citation.link.restructuredtext"
					3: name: "punctuation.definition.constant.restructuredtext"
					4: name: "punctuation.definition.constant.restructuredtext"
					5: name: "punctuation.definition.constant.restructuredtext"
					6: name: "string.other.citation.restructuredtext"
			}

			# Citation reference
			{
				name: "meta.link.citation.restructuredtext"
				match: "((\\[)[A-z][A-z0-9_-]*(\\]))(_)"
				captures:
					1: name: "constant.other.citation.link.restructuredtext"
					2: name: "punctuation.definition.constant.restructuredtext"
					3: name: "punctuation.definition.constant.restructuredtext"
					4: name: "punctuation.definition.constant.restructuredtext"
			}
		]



	comments:
		patterns: [

			# Kludge to match empty/unindented block-comments
			{
				name:  "comment.block.empty-start.double-dot.restructuredtext"
				begin: "^(\\.\\.)[\\t ]*$\\n?"
				end:   "^(?<=\\G)\\s*$\\n?|^(?=\\S)"
				beginCaptures:
					1: name: "punctuation.definition.comment.restructuredtext"
				patterns: [
					# This exists to stop FirstMate ending too early
					begin: "^(\\s+).*?\\S+\\s*$\\n"
					end:   "^\\s*$\\n|^(?=\\S)"
				]
			}


			# Kludge to match (most) indented block-comments
			{
				name: "comment.block.empty-start.double-dot.restructuredtext"
				begin: "^([\\t ]*)(\\.\\.)[\\t ]*$\\n?"
				end:   "^(?!\\1\\s*\\S)|^(?<!\\G)\\s*$\\n?|^(?=\\S)"
				beginCaptures:
					2: name: "punctuation.definition.comment.restructuredtext"
				patterns: [
					begin: "^(\\s+).*?\\S+\\s*$\\n"
					end:   "^\\s*$\\n|^\\s*(?=\\S)"
				]
			}


			# Every other comment with text on the starting line
			{
				name: "comment.block.double-dot.restructuredtext"
				begin: "^(\\s*)(\\.\\.)(?=\\s|$)"
				end:   "^(?!\\1[\\t\\s]+\\S|\\s*$)|^(?=\\S)"
				beginCaptures:
					2: name: "punctuation.definition.comment.restructuredtext"
			}
		]



	footnotes:
		patterns: [

			# Definition
			{
				name: "meta.link.footnote.def.restructuredtext"
				begin: "^(\\s*)(\\.\\.)\\s+((\\[)(((#?)[^\\]]*?)|\\*)(\\]))\\s+"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				patterns: [include: "#inlines"]
				contentName: "string.other.footnote.restructuredtext"
				captures:
					2: name: "punctuation.definition.link.restructuredtext"
					3: name: "constant.other.footnote.link.restructuredtext"
					4: name: "punctuation.definition.constant.restructuredtext"
					7: name: "punctuation.definition.constant.restructuredtext"
					8: name: "punctuation.definition.constant.restructuredtext"
			}

			# Reference: [0]_
			{
				name: "meta.link.footnote.numeric.restructuredtext"
				match: "((\\[)[0-9]+(\\]))(_)"
				captures:
					1: name: "constant.other.footnote.link"
					2: name: "punctuation.definition.constant.restructuredtext"
					3: name: "punctuation.definition.constant.restructuredtext"
					4: name: "punctuation.definition.constant.restructuredtext"
			}

			# Reference: [#]_ or [#foo]_
			{
				name: "meta.link.footnote.auto.restructuredtext"
				match: "((\\[#)[A-z0-9_]*(\\]))(_)"
				captures:
					1: name: "constant.other.footnote.link"
					2: name: "punctuation.definition.constant.restructuredtext"
					3: name: "punctuation.definition.constant.restructuredtext"
					4: name: "punctuation.definition.constant.restructuredtext"
			}

			# Reference: [*]_
			{
				name: "meta.link.footnote.symbol.auto.restructuredtext"
				match: "((\\[)\\*(\\]))(_)"
				captures:
					1: name: "constant.other.footnote.link.restructuredtext"
					2: name: "punctuation.definition.constant.restructuredtext"
					3: name: "punctuation.definition.constant.restructuredtext"
					4: name: "punctuation.definition.constant.restructuredtext"
			}
		]



	"link-definition":
		patterns: [
			{
				name: "meta.link.reference.def.restructuredtext"
				match: "(\\.\\.)\\s+(_)([-.:\+\\d\\w\\s()/]+?)(:)\\s+(.*)"
				captures:
					1: name: "punctuation.definition.link.restructuredtext"
					2: name: "punctuation.definition.string.restructuredtext"
					3: name: "string.other.link.title.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: patterns: [include: "#uri"]
			}

			{
				name: "meta.link.reference.def.restructuredtext"
				match: "(\\.\\.)\\s+(_`)([^`]+)(`:)\\s+(.*)"
				captures:
					1: name: "punctuation.definition.link.restructuredtext"
					2: name: "punctuation.definition.string.restructuredtext"
					3: name: "string.other.link.title.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: patterns: [include: "#uri"]
			}
		]


	"link-reference":
		patterns: [
			{
				name: "meta.link.reference"
				match: "\\b([-.:+_\\d\\w]+)(_)\\b"
				captures:
					1: name: "string.other.link.title.restructuredtext"
					2: name: "punctuation.definition.link.restructuredtext"
			}

			{
				name: "meta.link.reference"
				match: "(`)(.*?)(`__?)"
				captures:
					1: name: "punctuation.definition.link.restructuredtext"
					2: name: "string.other.link.title.restructuredtext"
					3: name: "punctuation.definition.link.restructuredtext"
			}
		]


	# Literal Blocks
	"raw-blocks":
		contentName: "meta.raw.block.restructuredtext"
		patterns: [name: "markup.raw.inner.restructuredtext", match: ".+"]
		begin: "^(?!\\s*\\.\\.\\s\\w+)(\\s*)(.*)(::)$"
		end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
		beginCaptures:
			2: patterns: [include: "#inlines"]
			3: name: "punctuation.section.raw.restructuredtext"


	# Interactive Python sessions
	doctests:
		name: "meta.doctest.restructuredtext"
		begin: "^(\\s*)(>>>)\\s+(.*)$\\n"
		end:   "^\\s*$|^(?=\\1>>> )|^(?=>>>)|^(?!\\1)\\s+\\S"
		contentName: "markup.raw.restructuredtext"
		beginCaptures:
			2: name: "punctuation.separator.prompt.doctest.restructuredtext"
			3: patterns: [include: "source.python"]


	# Tables
	tables:
		patterns: [

			# Grid tables
			{
				name: "meta.table.grid-table.restructuredtext"
				contentName: "markup.other.table.restructuredtext"
				begin: "(?=((\\+-[+-]+))|((\\+=[+=]+))\\s*$)"
				end:   "^\\s*$"
				patterns: [
					{include: "#table-borders"}
					{include: "#inlines"}
				]
			}

			# Simple tables
			{
				name: "punctuation.definition.table.simple-divider.restructuredtext"
				match: """(?x)
					^\\s*-{2,}\\s+-{2,}(?:\\s+-{2,})*\\s*$
					|
					^\\s*={2,}\\s+={2,}(?:\\s+={2,})*\\s*$
				"""
			}
		]


	# Row and column dividers
	"table-borders":
		patterns: [
			{
				begin: "\\+(?=-+(?=\\+|$))"
				end:   "(?=\\+(?=-)|$)|\\+(?=\\s|$)"
				contentName: "punctuation.definition.table.row-divider.restructuredtext"
				beginCaptures: 0: name: "punctuation.definition.table.joint.restructuredtext"
				endCaptures:   0: name: "punctuation.definition.table.joint.restructuredtext"
			}

			{
				begin: "\\+(?==+(?=\\+|$))"
				end:   "(?=\\+(?==)|$)|\\+\\s*$"
				contentName: "punctuation.definition.table.header.row-divider.restructuredtext"
				beginCaptures: 0: name: "punctuation.definition.table.joint.restructuredtext"
				endCaptures:   0: name: "punctuation.definition.table.joint.restructuredtext"
			}

			{
				match: "\\|"
				name: "punctuation.definition.table.header.column-divider.restructuredtext"
			}
		]

	# Named tag/field
	"tag-name":
		name: "entity.name.tag.restructuredtext"
		match: "(:)[A-Za-z][\\w\\s=.-]*(:)"
		captures:
			1: "name": "punctuation.definition.field.restructuredtext"
			2: "name": "punctuation.definition.field.restructuredtext"


	# Substitution reference: “|linked|_” or “|unlinked|”
	substitution:
		name: "support.variable.substitution.restructuredtext"
		match: "(?<!\\\\)(\\|)[^|]+(?<!\\\\)(\\|_{0,2})"
		captures:
			1: name: "punctuation.definition.substitution.restructuredtext"
			2: name: "punctuation.definition.substitution.restructuredtext"


	"substitution-definition":
		patterns: [

			# Image substitution – “.. |foo| image:: ./path/to/image.png”
			{
				name: "meta.substitution-definition.image.restructuredtext"
				begin: "^(\\s*)(\\.\\.)\\s(\\|)(?=\\S)([^\\|]+)((?<=\\S)\\|)\\s+(image)(::)\\s*(\\S+)"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				patterns: [include: "#image-options"]
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "punctuation.definition.substitution.start.restructuredtext"
					4: name: "entity.name.substitution.restructuredtext"
					5: name: "punctuation.definition.substitution.end.restructuredtext"
					6: name: "support.directive.restructuredtext"
					7: name: "punctuation.separator.key-value.restructuredtext"
					8: patterns: [include: "#uri"]
			}


			# Generic/custom definition – “.. |foo| something else:: …”
			{
				name: "meta.substitution-definition.restructuredtext"
				begin: "^(\\s*)(\\.\\.)\\s(\\|)(?=\\S)([^\\|]+)((?<=\\S)\\|)\\s+(\\S+.*(?=::))(::)(.*)"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				patterns: [include: "#directive-options"]
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "punctuation.definition.substitution.start.restructuredtext"
					4: name: "entity.name.substitution.restructuredtext"
					5: name: "punctuation.definition.substitution.end.restructuredtext"
					6: name: "support.directive.restructuredtext"
					7: name: "punctuation.separator.key-value.restructuredtext"
					8: name: "string.unquoted.substitution.data.restructuredtext", patterns: [include: "#inlines"]
			}
		]


	# Interpreted text role
	role:
		name:  "meta.interpreted-role.restructuredtext"
		begin: "((:)\\w+(?:[-_.:+]\\w+)*+(:))(?=`)"
		end:   "(?!\\G)"
		beginCaptures:
			1: name: "keyword.operator.role.restructuredtext"
			2: name: "punctuation.definition.role.name.begin.restructuredtext"
			3: name: "punctuation.definition.role.name.end.restructuredtext"
		patterns: [{
			begin: "\\G`"
			end:   "`"
			beginCaptures: 0: name: "punctuation.definition.role.body.begin.restructuredtext"
			endCaptures:   0: name: "punctuation.definition.role.body.end.restructuredtext"
			patterns: [
				{include: "#role-abbr"}
				{include: "#role-code"}
				{include: "#role-command"}
				{include: "#role-dfn"}
				{include: "#role-emphasis"}
				{include: "#role-file"}
				{include: "#role-html"}
				{include: "#role-literal"}
				{include: "#role-manpage"}
				{include: "#role-math"}
				{include: "#role-numref"}
				{include: "#role-pep"}
				{include: "#role-ref"}
				{include: "#role-rfc"}
				{include: "#role-strong"}
				{include: "#role-subscript"}
				{include: "#role-superscript"}
				{include: "#role-term"}
				{include: "#role-titleref"}
				{include: "#role-other"}
			]
		}]


	# Abbreviation — “:abbr:`FAQ (Frequently Asked Questions)`”
	"role-abbr":
		patterns: [{
			# Sphinx's `:abbr:` role
			begin: "(?i)(?<=:abbr:`)\\G"
			end:   "(?=`)"
			patterns: [
				{include: "#escape"}
				{
					# The abbreviated text
					name:  "meta.abbreviation.restructuredtext"
					begin: "\\G\\s*"
					end:   "(?=\\s*(?:\\(|`))"
					contentName: "constant.other.abbreviation.restructuredtext"
					patterns: [include: "#escape"]
				}
				{
					# The meaning of the abbreviation, enclosed in brackets
					name:  "meta.explanation.restructuredtext"
					begin: "\\("
					end:   "(\\))|((?:[^\\x29`]|\\.)*+)(?=`)"
					contentName: "string.quoted.brackets.restructuredtext"
					beginCaptures:
						0: name: "punctuation.definition.string.begin.restructuredtext"
					endCaptures:
						1: name: "punctuation.definition.string.end.restructuredtext"
						2: name: "invalid.illegal.unclosed-parenthetical.restructuredtext"
					patterns: [include: "#escape"]
				}
			]
		},{
			# Docutils's default “:abbreviation:” and “:acronym:” roles, neither of which expose the “explanation”
			# attribute of the doctree node (see https://docutils.sourceforge.io/docs/ref/doctree.html#examples).
			name:  "meta.abbreviation.restructuredtext"
			begin: "(?i)(?<=:abbreviation:`|:acronym:`|:a[bc]:`)\\G"
			end:   "(?=`)"
			contentName: "constant.other.abbreviation.restructuredtext"
			patterns: [include: "#escape"]
		}]


	# Inline code
	"role-code":
		name:  "markup.raw.code.monospace.literal.restructuredtext"
		begin: "(?i)(?<=:code:`)\\G"
		end:   "(?=`)"
		patterns: [include: "#escape"]


	# Command name, displayed in a monospaced bold face
	"role-command":
		name:  "markup.bold.restructuredtext"
		begin: "(?i)(?<=:command:`)\\G"
		end:   "(?=`)"
		patterns: [include: "#escape"]


	# Defining instance of a term
	"role-dfn":
		name:  "markup.italic.definition.restructuredtext"
		begin: "(?i)(?<=:dfn:`)\\G"
		end:   "(?=`)"
		patterns: [include: "#escape"]


	# Emphasised text, usually rendered in italics
	"role-emphasis":
		name:  "markup.italic.emphasis.restructuredtext"
		begin: "(?i)(?<=:emphasis:`)\\G"
		end:   "(?=`)"
		patterns: [include: "#escape"]


	# Filename or directory
	"role-file":
		name:  "meta.link-destination.filename.restructuredtext"
		begin: "(?i)(?<=:file:`)\\G"
		end:   "(?=`)"
		contentName: "constant.other.reference.link.restructuredtext"
		patterns: [
			{include: "#escape"}
			
			# Bracketed sections represent “variable” components of a filename
			name: "meta.embedded.line.restructuredtext"
			match: "({)((?:[^\\\\}]|\\\\.)*+)(})"
			captures:
				1: name: "punctuation.section.embedded.begin.restructuredtext"
				2: name: "variable.parameter.placeholder.restructuredtext", patterns: [include: "#escape"]
				3: name: "punctuation.section.embedded.end.restructuredtext"
		]


	# Embedded HTML markup
	"role-html":
		name: "text.embedded.html.basic"
		begin: "(?xi)
			(?: (?<=:html:`)
			|   (?<=:raw-html:`)
			) \\G"
		end: "(?=`)"
		patterns: [include: "text.html.basic"]


	# Literal text, which isn't necessarily source code
	"role-literal":
		name:  "markup.raw.monospace.literal.restructuredtext"
		begin: "(?i)(?<=:literal:`)\\G"
		end:   "(?=`)"
		patterns: [include: "#escape"]


	# Manpage reference – :manpage:`ls(1)`
	"role-manpage":
		name:  "meta.manpage.link.inline.restructuredtext"
		begin: "(?i)(?<=:manpage:`)\\G"
		end:   "(?=`)"
		patterns: [
			{include: "hidden.manref"}
			{
				# Copied from above grammar; see `manref.cson` at Alhadis/language-roff@6f08acf
				match: "([-.\\w]+)(\\()(\\d+(?!\\d)|(?:[lnop]|tcl)(?=[/\\)]))([\\w:/]*?(?:/(?!/)[-\\w:./]+)?)(\\))"
				captures:
					1: name: "markup.bold.manpage-name.restructuredtext"
					2: name: "punctuation.section.round.bracket.begin.restructuredtext"
					3: name: "constant.language.manpage-section.restructuredtext"
					4: name: "constant.language.manpage-group.restructuredtext"
					5: name: "punctuation.section.round.bracket.end.restructuredtext"
			}
		]


	# Inline mathematical expression – :math:`1 + 2`
	"role-math":
		name:  "markup.math.inline.restructuredtext"
		begin: "(?i)(?<=:math:`)\\G"
		end:   "(?=`)"
		patterns: [include: "text.tex#math"]


	# Link to a referenced figure, section, table or code-block
	"role-numref":
		name:  "meta.numref.restructuredtext"
		begin: "(?i)(?<=:numref:`)\\G"
		end:   "(?=`)"
		patterns: [include: "#link"]


	# Link to a Python Enhancement Proposal (PEP)
	"role-pep":
		begin: "(?xi)
			(?: (?<= :pep:`)
			|   (?<= :pep-reference:`)
			) \\G"
		end: "(?=`)"
		patterns: [{
			# Valid integer
			match: "\\G(\\d+)(?=`)"
			captures:
				0: name: "constant.numeric.pep-number.restructuredtext"
				1: name: "markup.underline.link.pep.$1.hyperlink.restructuredtext"
		},{
			# Some weird junk
			name: "invalid.illegal.bad-integer.restructuredtext"
			match: "[^`]+"
		}]


	# Roles for linking and cross-referencing resources
	"role-ref":
		begin: "(?xi)
			(?: (?<=:ref:`)
			|   (?<=:doc:`)
			|   (?<=:download:`)
			) \\G"
		end: "(?=`)"
		patterns: [include: "#link"]


	# Link to a Request for Comments (RFC)
	"role-rfc":
		begin: "(?xi)
			(?: (?<= :rfc:`)
			|   (?<= :rfc-reference:`)
			) \\G"
		end: "(?=`)"
		patterns: [{
			# Valid integer
			match: "\\G(\\d+)(?=`)"
			captures:
				0: name: "constant.numeric.rfc-number.restructuredtext"
				1: name: "markup.underline.link.rfc.$1.hyperlink.restructuredtext"
		},{
			# Some weird junk
			name: "invalid.illegal.bad-integer.restructuredtext"
			match: "[^`]+"
		}]


	# Strongly emphasised text, usually rendered in bold
	"role-strong":
		name:  "markup.bold.emphasis.strong.restructuredtext"
		begin: "(?i)(?<=:strong:`)\\G"
		end:   "(?=`)"
		patterns: [include: "#escape"]


	# Subscripted text
	"role-subscript":
		name: "markup.subscript.restructuredtext"
		begin: "(?xi)
			(?: (?<=:sub:`)
			|   (?<=:subscript:`)
			) \\G"
		end: "(?=`)"
		patterns: [include: "#escape"]


	# Superscripted text
	"role-superscript":
		name: "markup.superscript.restructuredtext"
		begin: "(?xi)
			(?: (?<=:sup:`)
			|   (?<=:superscript:`)
			) \\G"
		end: "(?=`)"
		patterns: [include: "#escape"]


	# References to various symbols and term definitions
	"role-term":
		name: "variable.parameter.reference.restructuredtext"
		begin: "(?xi)
			(?: (?<=:term:`)
			|   (?<=:envvar:`)
			|   (?<=:keyword:`)
			|   (?<=:option:`)
			|   (?<=:token:`)
			) \\G"
		end: "(?=`)"
		patterns: [include: "#escape"]


	# Title of a referenced creative work
	"role-titleref":
		name: "markup.italic.title-reference.restructuredtext"
		begin: "(?xi)
			(?: (?<= :t:`)
			|   (?<= :title:`)
			|   (?<= :title-reference:`)
			) \\G"
		end: "(?=`)"
		patterns: [include: "#escape"]


	# Fallback for any text role we don't recognise
	"role-other":
		name:  "string.interpolated.restructuredtext"
		begin: "(?<=:`)\\G"
		end:   "(?=`)"
		patterns: [include: "#escape"]


	directives:
		patterns: [

			# Image
			{
				name: "meta.image.restructuredtext"
				begin: "^(\\s*)(\\.\\.)\\s(image)(::)\\s*(\\S+)"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				patterns: [include: "#image-options"]
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: patterns: [include: "#uri"]
			}

			# Figure
			{
				name: "meta.figure.restructuredtext"
				begin: "^(\\s*)(\\.\\.)\\s(figure)(::)\\s*(\\S+)"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				patterns: [
					{include: "#image-options"}
					{include: "#all"}
				]
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: patterns: [include: "#uri"]
			}
			
			# Table of contents
			{
				name:  "meta.toctree.restructuredtext"
				begin: "^(\\s*)(\\.\\.)\\s(toctree)(::)(?=\\s*$)"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
				patterns: [
					{
						# Leading options
						name:  "meta.field-list.restructuredtext"
						begin: "(?<=::)\\G"
						end:   "^(?=[ \\t]*$)"
						patterns: [include: "#toctree-options"]
					}
					{
						# Page entry: “Description <filename>”
						name: "meta.entry.restructuredtext"
						match: "^\\s+(?!\\G)(\\S.*?)\\s+(<.*?>)[ \\s]*$"
						captures:
							1: name: "markup.list.description.restructuredtext"
							2: patterns: [include: "#xref-target"]
					}
					{
						# Page entry: “filename-and-description”
						name: "meta.entry.restructuredtext"
						match: "^\\s+(?!\\G)(\\S.*?)[ \\s]*$"
						captures:
							1: patterns: [include: "#xref-target"]
					}
				]
			}

			# HTML
			{
				begin: "^([ \\t]*)(\\.\\.)\\s(raw|code(?:-block)?)(::)\\s+(html)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				patterns: [include: "text.html.basic"]
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# CoffeeScript
			{
				contentName: "source.embedded.coffee"
				patterns: [include: "source.coffee"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(coffee-?script)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# JavaScript
			{
				contentName: "source.embedded.js"
				patterns: [include: "source.js"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(js|javascript)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# TypeScript
			{
				contentName: "source.embedded.ts"
				patterns: [include: "source.ts"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(typescript)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# JSON
			{
				contentName: "source.embedded.json"
				patterns: [include: "source.json"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(json)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# CSS
			{
				contentName: "source.embedded.css"
				patterns: [include: "source.css"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(css)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# XML
			{
				contentName: "source.embedded.xml"
				patterns: [include: "text.xml"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?|raw)(::)\\s+((?:pseudo)?xml)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# Ruby
			{
				contentName: "source.embedded.ruby"
				patterns: [include: "source.ruby"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(ruby)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# Java
			{
				contentName: "source.embedded.java"
				patterns: [include: "source.java"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(java)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# Erlang
			{
				contentName: "source.embedded.erlang"
				patterns: [include: "source.erlang"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(erlang)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# C-sharp/C#
			{
				contentName: "source.embedded.cs"
				patterns: [include: "source.cs"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(csharp|c#)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# PHP
			{
				contentName: "source.embedded.php"
				patterns: [include: "source.php"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(php[3-5]?)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# Shell
			{
				contentName: "source.embedded.shell"
				patterns: [include: "source.shell"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(shell|(ba|k)?sh)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# Python/Sage
			{
				contentName: "source.embedded.python"
				patterns: [include: "source.python"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(py(thon)?|sage)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# IPython
			{
				contentName: "source.embedded.python"
				patterns: [include: "source.python"]
				begin: "^([ \\t]*)(\\.\\.)\\s(ipython)(::)\\s+(py(thon)?)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# Stata
			{
				contentName: "source.embedded.stata"
				patterns: [include: "source.stata"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(stata)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# SAS
			{
				contentName: "source.embedded.python"
				patterns: [include: "source.python"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(sas)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# Objective-C
			{
				contentName: "source.embedded.objc"
				patterns: [include: "source.objc"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(objective-?c|obj-?c)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# YAML
			{
				contentName: "source.embedded.yaml"
				patterns: [include: "source.yaml"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(yaml)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}
			
			# Roff
			{
				contentName: "text.embedded.roff"
				patterns: [{
					match: "(?:^|\\G)[ \\t]*(\\S.*)"
					captures:
						1: patterns: [include: "text.roff"]
				}]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?|raw)(::)\\s+(manpage|man|roff)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}
			
			# LaTeX
			{
				contentName: "text.embedded.tex.latex"
				patterns: [include: "text.tex.latex"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?|raw)(::)\\s+((?:xe)?(?:la)?tex)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}
			
			# Texinfo
			{
				contentName: "text.embedded.texinfo"
				patterns: [include: "text.texinfo"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?|raw)(::)\\s+(texinfo)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}
			
			# Verbatim text, or an unrecognised format
			{
				contentName: "markup.raw.inner.restructuredtext"
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?|raw)(::)(?:\\s+([-\\w]+))?\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}
			
			# Parsed (unquoted) literal text
			{
				contentName: "markup.raw.inner.parsed.restructuredtext"
				begin: "^([ \\t]*)(\\.\\.)\\s(parsed-literal)(::)(?:\\s+([-\\w]+))?\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
				patterns: [include: "#inlines"]
			}

			# Math
			{
				name: "source.embedded.latex"
				contentName: "markup.math.block.restructuredtext"
				patterns: [include: "text.tex#math"]
				begin: "^([ \\t]*)(\\.\\.)\\s(math)(::)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
			}

			# Command-line option
			{
				name: "meta.option.directive.restructuredtext"
				match: "^\\s*(\\.\\.)\\s(option)(::)\\s*(.+)?$"
				captures:
					1: name: "punctuation.definition.directive.restructuredtext"
					2: name: "support.directive.restructuredtext"
					3: name: "punctuation.separator.key-value.restructuredtext"
					4: patterns: [
						{match: "<|>",        name: "punctuation.definition.bracket.angle.restructuredtext"}
						{match: ",",          name: "punctuation.delimiter.comma.restructuredtext"}
						{match: "[^\\s<>,]+", name: "entity.name.directive.restructuredtext"}
					]
			}

			# Directives
			{
				name: "meta.other.directive.restructuredtext"
				match: "^\\s*(\\.\\.)\\s([A-z][-A-z0-9_]+)(::)\\s*$"
				captures:
					1: name: "punctuation.definition.directive.restructuredtext"
					2: name: "support.directive.restructuredtext"
					3: name: "punctuation.separator.key-value.restructuredtext"
			}


			# Directives with arguments
			{
				name: "meta.other.directive.restructuredtext"
				match: "^\\s*(\\.\\.)\\s([A-z][-A-z0-9_]+)(::)\\s+(.+?)\\s*$"
				captures:
					1: name: "punctuation.definition.directive.restructuredtext"
					2: name: "support.directive.restructuredtext"
					3: name: "punctuation.separator.key-value.restructuredtext"
					4: name: "entity.name.directive.restructuredtext"
			}
		]


	# Optional :attribute: statements found underneath some directives
	"directive-options":
		patterns: [
			name: "meta.directive-option.restructuredtext"
			match: "(:[^:]+:)\\s*(.*)"
			captures:
				1: patterns: [include: "#tag-name"]
				2: name: "string.other.tag-value.restructuredtext"
		]


	# Image parameters (width/height, etc)
	"image-options":
		patterns: [

			# Alt text
			{
				name: "meta.image-option.alt.restructuredtext"
				match: "(:alt:)\\s*(.*)"
				captures:
					1: patterns: [include: "#tag-name"]
					2: name: "string.other.tag-value.restructuredtext"
			}

			# Height
			{
				name: "meta.image-option.height.restructuredtext"
				match: "(:height:)\\s*(.*)"
				captures:
					1: patterns: [include: "#tag-name"]
					2: patterns: [include: "#length"]
			}

			# Width
			{
				name: "meta.image-option.width.restructuredtext"
				match: "(:width:)\\s*(.*)"
				captures:
					1: patterns: [include: "#tag-name"]
					2: patterns: [include: "#length"]
			}

			# Scale
			{
				name: "meta.image-option.scale.restructuredtext"
				match: "(:scale:)\\s*(.*)"
				captures:
					1: patterns: [include: "#tag-name"]
					2: patterns: [include: "#length"]
			}

			# Align
			{
				name: "meta.image-option.align.restructuredtext"
				match: "(:align:)\\s*(?:(top|middle|bottom|left|center|right)\\b)?"
				captures:
					1: patterns: [include: "#tag-name"]
					2: name: "keyword.language.image-alignment.restructuredtext"
			}

			# Target
			{
				name: "meta.image-option.target.restructuredtext"
				match: "(:target:)\\s*(.*)?"
				captures:
					1: patterns: [include: "#tag-name"]
					2: name: "string.other.target.restructuredtext"
			}

			{include: "#doctree-options"}
			{include: "#directive-options"}
		]



	# Common Doctree options
	# See: http://docutils.sourceforge.net/docs/ref/rst/directives.html#id17
	"doctree-options":
		patterns: [

			# Classes
			{
				name: "meta.doctree-option.class.restructuredtext"
				match: "(:class:)\\s*(.*)"
				captures:
					1: patterns: [include: "#tag-name"]
					2: name: "string.other.class-list.restructuredtext"
			}

			# Name
			{
				name: "meta.doctree-option.name.restructuredtext"
				match: "(:name:)\\s*(.*)"
				captures:
					1: patterns: [include: "#tag-name"]
					2: name: "string.other.name.restructuredtext"
			}
		]


	# Sphinx domains
	domains:
		patterns: [

			# Python domain
			{
				name: "meta.sphinx-domain.restructuredtext"
				contentName: "source.embedded.python"
				begin: "^(\\s*)(\\.\\.)\\s+(py)(:)([^:]+)(::)"
				end:   "^(?!\\s*$|\\1[ \\t]{6,}\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "support.directive.restructuredtext"
					6: name: "punctuation.separator.key-value.restructuredtext"
				patterns: [
					{
						# Hack to stop runaway issues with backslashes
						match: "(?:\\G|^)([^(]*)(\\()([^\\\\)]*\\\\[^)]*)(\\))"
						captures:
							1: patterns: [include: "source.python"]
							2: name: "punctuation.parenthesis.begin.python"
							3: patterns: [
								{match: "\\\\.", name: "constant.character.escape.restructuredtext"}
								{include: "source.python"}
							]
							4: name: "punctuation.parenthesis.end.python"
					}
					{ include: "source.python" }
				]
			}


			# C domain
			{
				name: "meta.sphinx-domain.restructuredtext"
				contentName: "source.embedded.c"
				patterns: [include: "source.c"]
				begin: "^(\\s*)(\\.\\.)\\s+(c)(:)([^:]+)(::)"
				end:   "^(?!\\s*$|\\1[ \\t]{5,}\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "support.directive.restructuredtext"
					6: name: "punctuation.separator.key-value.restructuredtext"
			}


			# C++ domain
			{
				name: "meta.sphinx-domain.restructuredtext"
				begin: "^(\\s*)(\\.\\.)\\s+(cpp)(::?)([^:]+)(::)"
				end:   "^(?!\\s*$|\\1[ \\t]{5,}\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "support.directive.restructuredtext"
					6: name: "punctuation.separator.key-value.restructuredtext"

				# This is a hack to stop C++ syntax spilling out of control
				patterns: [
					match: "(.+)(\\\\?)$"
					captures:
						1: name: "source.embedded.cpp", patterns: [include: "source.cpp"]
						2: name: "constant.character.escape.newline.restructuredtext"
				]
			}


			# JavaScript domain
			{
				name: "meta.sphinx-domain.restructuredtext"
				begin: "^(\\s*)(\\.\\.)\\s+(js)(:)([^:]+)(::)"
				end:   "^(?!\\s*$|\\1[ \\t]{5,}\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "support.directive.restructuredtext"
					6: name: "punctuation.separator.key-value.restructuredtext"

				# JS syntax might go haywire too: expect its grammar to change at any time
				patterns: [
					match: "(.+)(\\\\?)$"
					captures:
						1: name: "source.embedded.js", patterns: [include: "source.js"]
						2: name: "constant.character.escape.newline.restructuredtext"
				]
			}


			# Anything else
			{
				name: "meta.sphinx-domain.restructuredtext"
				contentName: "string.unquoted.domain.restructuredtext"
				begin: "^(\\s*)(\\.\\.)\\s+([^:]+)(::?)([^:]+)(::)"
				end:   "^(?!\\s*$|\\1[ \\t]{5,}\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "support.directive.restructuredtext"
					6: name: "punctuation.separator.key-value.restructuredtext"
			}
	]


	"toctree-options":
		patterns: [
			{
				# Caption text
				name:  "meta.toctree-option.caption.restructuredtext"
				begin: "(:caption:)\\s+(?=\\S)"
				end:   "$"
				beginCaptures:
					1: patterns: [include: "#tag-name"]
				contentName: "string.unquoted.caption.restructuredtext"
			}
			{
				# Minimum or maximum depths to traverse a hierarchical list
				name:  "meta.toctree-option.$2.restructuredtext"
				begin: "(:((?:min|max)depth):)\\s+"
				end:   "$"
				beginCaptures:
					1: patterns: [include: "#tag-name"]
				patterns: [
					{
						# Valid, base-10 integer
						name: "constant.numeric.integer.restructuredtext"
						match: "\\G-?\\d+(?=\\s*$)"
					}
					{
						# Unexpected junk
						name: "invalid.illegal.bad-integer.restructuredtext"
						match: "\\G(\\S.+?)(?=\\s*$)"
					}
				]
			}
			{include: "#doctree-options"}
			{include: "#directive-options"}
		]


	# Cross-reference destination
	# https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#cross-referencing-syntax
	"xref-target":
		patterns: [{
			match: "(?:^|\\G)(<)(.*)(>)$"
			captures:
				1: name: "punctuation.definition.angle.bracket.begin.restructuredtext"
				2: patterns: [include: "#xref-target"]
				3: name: "punctuation.definition.angle.bracket.end.restructuredtext"
		},{
			match: "(?:^|\\G)(?:(!)|(~))?(?!<)((.+))(?<!<)$"
			captures:
				1: name: "keyword.operator.suppress-reference.restructuredtext"
				2: name: "keyword.operator.last-component-only.restructuredtext"
				3: name: "string.other.link.destination.restructuredtext"
				4: patterns: [{
					name: "keyword.operator.glob.wildcard.restructuredtext"
					match: "\\*"
				}]
		}]
