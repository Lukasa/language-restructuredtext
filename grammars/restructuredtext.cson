name: "reStructuredText"
scopeName: "text.restructuredtext"
fileTypes: ["rst", "rest", "rest.txt", "rst.txt"]
patterns: [ include: "#all" ]
limitLineLength: no
firstLineMatch: """(?x)
	# Emacs modeline
	-\\*-(?i:[ \\t]*(?=[^:;\\s]+[ \\t]*-\\*-)|(?:.*?[ \\t;]|(?<=-\\*-))[ \\t]*mode[ \\t]*:[ \\t]*)
		(?i:rst)
	(?=[ \\t;]|(?<![-*])-\\*-).*?-\\*-

	|

	# Vim modeline
	(?:(?:^|[ \\t])(?:vi|Vi(?=m))(?:m[<=>]?[0-9]+|m)?|[ \\t]ex)(?=:(?=[ \\t]*set?[ \\t][^\\r\\n:]+:)|:(?![ \\t]*set?[ \\t]))
	(?:(?:[ \\t]*:[ \\t]*|[ \\t])\\w*(?:[ \\t]*=(?:[^\\\\\\s]|\\\\.)*)?)*[ \\t:]
	(?:filetype|ft|syntax)[ \\t]*=
		(?i:rst)
	(?=$|\\s|:)
"""
injections:
	"L:meta.numref.restructuredtext":
		patterns: [{
			# printf(3)-style placeholder
			name: "constant.other.placeholder.figure-number.restructuredtext"
			match: "(%)s"
			captures:
				1: name: "punctuation.definition.placeholder.restructuredtext"
		},{
			# “{name}” and “{number}” placeholders
			name: "constant.other.placeholder.figure-$2.restructuredtext"
			match: "({)(name|number)(})"
			captures:
				1: name: "punctuation.definition.placeholder.begin.restructuredtext"
				3: name: "punctuation.definition.placeholder.end.restructuredtext"
		}]

repository:

	all:
		patterns: [
			{include: "#escape"}
			{include: "#line-blocks"}
			{include: "#tables"}
			{include: "#headings"}
			{include: "#substitution-definition"}
			{include: "#citation-definition"}
			{include: "#footnote-definition"}
			{include: "#directives"}
			{include: "#raw-blocks"}
			{include: "#link-target"}
			{include: "#inlines"}
			{include: "#tag-name"}
			{include: "#doctests"}
			{include: "#domains"}
			{include: "#comments"}
		]


	# Inline elements: formatting, links, citations, etc
	inlines:
		patterns: [
			{include: "#escape"}
			{include: "#quoted"}
			{include: "#emphasis"}
			{include: "#link-target-inline"}
			{include: "#role"}
			{include: "#substitution"}
			{include: "#literal"}
			{include: "#link-reference"}
			{include: "#footnote"}
			{include: "#citation"}
		]

	escape:
		match: "\\\\."
		name: "constant.character.escape.backslash.restructuredtext"


	# Numeric length values
	length:
		name: "constant.numeric.length.restructuredtext"
		match: "[\\d.]+\\s*(?i:(em|ex|px|in|cm|mm|pt|pc)|(%))?"
		captures:
			1: name: "keyword.other.${1:/downcase}-unit.restructuredtext"
			2: name: "keyword.other.percentile-unit.restructuredtext"


	# Section border
	headings:
		name: "markup.heading.restructuredtext"
		match: "^(([-=~`#\"^+*:.'_])\\2{2,})(?=\\s*$)"
		captures:
			1: name: "punctuation.definition.heading.restructuredtext"


	# Line blocks
	"line-blocks":
		name: "meta.line-block.restructuredtext"
		begin: "^(\\s*)(\\|)(?!.*?(?<=\\S)\\|)"
		end:   "^(?=\\s*$\\n?)"
		beginCaptures:
			2: name: "punctuation.separator.line-block.restructuredtext"
		patterns: [
			{
				match: "^\\s*(\\|)"
				captures:
					1: name: "punctuation.separator.line-block.restructuredtext"
			}

			{include: "#inlines"}
		]


	# Inhibit inline markup when start/end-string is surrounded by a quoted or bracketed character pair
	# https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#inline-markup-recognition-rules (rule 5)
	quoted:
		match: """(?x)
			(?: ' (?:\\*{1,2}|`|_|\|) '
			|   " (?:\\*{1,2}|`|_|\|) "
			|   < (?:\\*{1,2}|`|_|\|) >
			| \\( (?:\\*{1,2}|`|_|\|) \\)
			| \\[ (?:\\*{1,2}|`|_|\|) \\]
			| \\{ (?:\\*{1,2}|`|_|\|) \\}
			|   « (?:\\*{1,2}|`|_|\|) »
			|   ‹ (?:\\*{1,2}|`|_|\|) ›
			|   » (?:\\*{1,2}|`|_|\|) [«»]
			|   › (?:\\*{1,2}|`|_|\|) [‹›]
			|   ‘ (?:\\*{1,2}|`|_|\|) [’‚]
			|   ’ (?:\\*{1,2}|`|_|\|) ’
			|   ‚ (?:\\*{1,2}|`|_|\|) [‘’]
			|   “ (?:\\*{1,2}|`|_|\|) [”„]
			|   „ (?:\\*{1,2}|`|_|\|) [“”]
			|   ” (?:\\*{1,2}|`|_|\|) ”
			|  （ (?:\\*{1,2}|`|_|\|) ）
			|  ﹙ (?:\\*{1,2}|`|_|\|) ﹚
			|  ⁽ (?:\\*{1,2}|`|_|\|) ⁾
			|  ₍ (?:\\*{1,2}|`|_|\|) ₎
			|  ［ (?:\\*{1,2}|`|_|\|) ］
			|  ｛ (?:\\*{1,2}|`|_|\|) ｝
			|  ﹛ (?:\\*{1,2}|`|_|\|) ﹜
			|  ༼ (?:\\*{1,2}|`|_|\|) ༽
			|  ᚛ (?:\\*{1,2}|`|_|\|) ᚜
			|  ⁅ (?:\\*{1,2}|`|_|\|) ⁆
			|  ⧼ (?:\\*{1,2}|`|_|\|) ⧽
			|  ⦃ (?:\\*{1,2}|`|_|\|) ⦄
			|  ⦅ (?:\\*{1,2}|`|_|\|) ⦆
			|  ｟ (?:\\*{1,2}|`|_|\|) ｠
			|  ⦇ (?:\\*{1,2}|`|_|\|) ⦈
			|  ⦉ (?:\\*{1,2}|`|_|\|) ⦊
			|  ⦋ (?:\\*{1,2}|`|_|\|) ⦌
			#|  ⦍ (?:\\*{1,2}|`|_|\|) ⦐   # XXX: For some reason, Docutils allows this
			|  ⦏ (?:\\*{1,2}|`|_|\|) ⦎
			|  ⦑ (?:\\*{1,2}|`|_|\|) ⦒
			|  ⦓ (?:\\*{1,2}|`|_|\|) ⦔
			|  ⦕ (?:\\*{1,2}|`|_|\|) ⦖
			|  ⦗ (?:\\*{1,2}|`|_|\|) ⦘
			|  ⟅ (?:\\*{1,2}|`|_|\|) ⟆
			|  ⟦ (?:\\*{1,2}|`|_|\|) ⟧
			|  ⟨ (?:\\*{1,2}|`|_|\|) ⟩
			|  ⟪ (?:\\*{1,2}|`|_|\|) ⟫
			|  ❨ (?:\\*{1,2}|`|_|\|) ❩
			|  ❪ (?:\\*{1,2}|`|_|\|) ❫
			|  ❬ (?:\\*{1,2}|`|_|\|) ❭
			|  ❮ (?:\\*{1,2}|`|_|\|) ❯
			|  ❰ (?:\\*{1,2}|`|_|\|) ❱
			|  ❲ (?:\\*{1,2}|`|_|\|) ❳
			|  ❴ (?:\\*{1,2}|`|_|\|) ❵
			|  ⸂ (?:\\*{1,2}|`|_|\|) ⸃
			|  ⸃ (?:\\*{1,2}|`|_|\|) ⸂
			|  ⸄ (?:\\*{1,2}|`|_|\|) ⸅
			|  ⸅ (?:\\*{1,2}|`|_|\|) ⸄
			|  ⸉ (?:\\*{1,2}|`|_|\|) ⸊
			|  ⸊ (?:\\*{1,2}|`|_|\|) ⸉
			|  ⸌ (?:\\*{1,2}|`|_|\|) ⸍
			|  ⸍ (?:\\*{1,2}|`|_|\|) ⸌
			|  ⸜ (?:\\*{1,2}|`|_|\|) ⸝
			|  ⸝ (?:\\*{1,2}|`|_|\|) ⸜
			|  〈 (?:\\*{1,2}|`|_|\|) 〉
			|  〈 (?:\\*{1,2}|`|_|\|) 〉
			|  《 (?:\\*{1,2}|`|_|\|) 》
			|  「 (?:\\*{1,2}|`|_|\|) 」
			|  ｢ (?:\\*{1,2}|`|_|\|) ｣
			|  『 (?:\\*{1,2}|`|_|\|) 』
			|  【 (?:\\*{1,2}|`|_|\|) 】
			|  〔 (?:\\*{1,2}|`|_|\|) 〕
			|  ﹝ (?:\\*{1,2}|`|_|\|) ﹞
			|  〖 (?:\\*{1,2}|`|_|\|) 〗
			|  〘 (?:\\*{1,2}|`|_|\|) 〙
			|  〚 (?:\\*{1,2}|`|_|\|) 〛
			|  ⧘ (?:\\*{1,2}|`|_|\|) ⧙
			|  ⧚ (?:\\*{1,2}|`|_|\|) ⧛
			) """


	# Emphasised text: bold/italics
	emphasis:
		patterns: [

			# Bold
			{
				contentName: "markup.bold.emphasis.strong.restructuredtext"
				begin: """(?x)
					(?:^|(?<=[-:/'\"<\x28\\\x5B{\\s«»༺⟬⟮⸠⸡⸢⸤⸦⸨‚„‟‛])|(?<![\\x00-\\x9F])(?<=[\\p{Ps}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))
					\\*\\*
					(?=\\S)
					(?!\\*\\*(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))
				"""
				end: "(?<=\\S)\\*\\*(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}])|^(?=\\s*$)"
				beginCaptures: 0: "name": "punctuation.definition.bold.begin.restructuredtext"
				endCaptures:   0: "name": "punctuation.definition.bold.end.restructuredtext"
				patterns: [include: "#escape"]
			}

			# Italic
			{
				contentName: "markup.italic.emphasis.restructuredtext"
				begin: """(?x)
					(?:^|(?<=[-:/'\"<\x28\\\x5B{\\s«»༺⟬⟮⸠⸡⸢⸤⸦⸨‚„‟‛])|(?<![\\x00-\\x9F])(?<=[\\p{Ps}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))
					\\*
					(?=\\S)
					(?!\\*(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))
				"""
				end: "(?<=\\S)\\*(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}])|^(?=\\s*$)"
				beginCaptures: 0: name: "punctuation.definition.italic.begin.restructuredtext"
				endCaptures:   0: name: "punctuation.definition.italic.end.restructuredtext"
				patterns: [include: "#escape"]
			}
		]


	# Inline literal
	literal:
		contentName: "markup.raw.monospace.literal.restructuredtext"
		begin: """(?x)
			(?:^|(?<=[-:/'\"<\x28\\\x5B{\\s«»༺⟬⟮⸠⸡⸢⸤⸦⸨‚„‟‛])|(?<![\\x00-\\x9F])(?<=[\\p{Ps}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))
			``
			(?=\\S)
			(?!``(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))
		"""
		end: "(?<=\\S)``(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}])"
		beginCaptures: 0: name: "punctuation.definition.literal.begin.restructuredtext"
		endCaptures:   0: name: "punctuation.definition.literal.end.restructuredtext"



	# Stuff matched inside hyperlinks and cross-references
	link:
		patterns: [{
			# `Title <target>`
			match: "\\G\\s*((?:[^`\\\\]|\\\\.)+\\s+)?((<)((?:[^`\\\\<>_]|_(?!>)|\\\\.)+)(_)?(>))\\s*(?=`|$)"
			captures:
				1: patterns: [{
					name:  "entity.name.reference.restructuredtext"
					begin: "(?:^|\\G)"
					end:   "$"
					patterns: [include: "#escape"]
				}]
				2: name: "meta.link-destination.restructuredtext"
				3: name: "punctuation.definition.angle.bracket.begin.restructuredtext"
				4: name: "constant.other.reference.link.restructuredtext", patterns: [include: "#escape"]
				5: name: "punctuation.definition.reference.named.restructuredtext"
				6: name: "punctuation.definition.angle.bracket.end.restructuredtext"
		},{
			# `target-only`
			match: "\\G\\s*((?:[^`\\\\]|\\.)++)\\s*(?=`|$)"
			captures:
				1: patterns: [{
					name:  "meta.link-destination.restructuredtext"
					begin: "(?:^|\\G)"
					end:   "$"
					contentName: "constant.other.reference.link.restructuredtext"
					patterns: [include: "#escape"]
				}]
		}]


	# Hyperlink reference
	"link-reference":
		patterns: [{
			# Single-line
			match: "(?x)
				(?:^|(?<=[-:/'\"<\x28\\\x5B{\\s«»༺⟬⟮⸠⸡⸢⸤⸦⸨‚„‟‛])|(?<![\\x00-\\x9F])(?<=[\\p{Ps}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))
				(?:(`(?:[^\\\\`]|\\\\.)*+`__?)|\\b((?=\\w)(?!_)(?:[-_.:+]?[A-Za-z0-9])++__?))
				(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}])"
			captures:
				1: patterns: [include: "#link-reference-quoted"]
				2: patterns: [include: "#link-reference-unquoted"]
		},{
			# Multi-line
			begin: "(?x)
				(?:^|(?<=[-:/'\"<\x28\\\x5B{\\s«»༺⟬⟮⸠⸡⸢⸤⸦⸨‚„‟‛])|(?<![\\x00-\\x9F])(?<=[\\p{Ps}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))
				(?=`(?:[^\\\\`]|\\\\.)++$)"
			end: "(?!\\G)"
			patterns: [include: "#link-reference-quoted"]
		}]


	# Backquoted link reference: “`name`_”
	"link-reference-quoted":
		name:  "meta.link-reference.quoted.restructuredtext"
		begin: "(?:\\G|^)`"
		end:   "(`)(?:(__)\\b|(_)\\b)?"
		beginCaptures:
			0: name: "punctuation.definition.link.begin.restructuredtext"
		endCaptures:
			1: name: "punctuation.definition.link.end.restructuredtext"
			2: name: "punctuation.definition.reference.anonymous.restructuredtext"
			3: name: "punctuation.definition.reference.named.restructuredtext"
		patterns: [{
			# Embedded URI
			name:  "meta.embedded-target.restructuredtext"
			begin: "\\G(?=.*(?:\\G|(?<=\\s))<(?:[^\\\\<>`]|\\\\.)++>\\s*(?:$|`))"
			end:   "(?=\\s*(?:$|`))"
			patterns: [include: "#link"]
		},{
			# Contents of a multiline link reference, sans indentation
			match: "(?:\\G|^\\s*)((?!\\s)(?:[^\\\\`]|\\\\.)++)"
			captures: 1:
				name: "constant.other.reference.link.restructuredtext"
				patterns: [include: "#escape"]
		}]


	# Simple link reference: “name_”
	"link-reference-unquoted":
		name:  "meta.link-reference.unquoted.restructuredtext"
		begin: "(?:\\G|(?:^|(?<=[-:/'\"<\x28\\\x5B{\\s«»༺⟬⟮⸠⸡⸢⸤⸦⸨‚„‟‛])|(?<![\\x00-\\x9F])(?<=[\\p{Ps}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}])))(?=\\w)(?!_)"
		end:   "(?:(__)|(_))(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}])|(?=_\\W)"
		contentName: "constant.other.reference.link.restructuredtext"
		endCaptures:
			1: name: "punctuation.definition.reference.anonymous.restructuredtext"
			2: name: "punctuation.definition.reference.named.restructuredtext"
		patterns: [
			{match: "[-_.:+][A-Za-z0-9]"}
			{include: "#escape"}
		]


	# Hyperlink target definitions
	"link-target":
		patterns: [{
			# Anonymous hyperlink target: “.. __: http://target.url/”
			name:  "meta.definition.link-target.anonymous.restructuredtext"
			begin: "(?:^(\\s*)|(?!^)\\G\\s*)(?:(\\.\\.)\\s+(__)(:)|(__))(?:$|\\s+)"
			end:   "^(?:(?=\\s*$)|(?!\\1[ \\t]+\\S))"
			beginCaptures:
				2: name: "punctuation.definition.directive.restructuredtext"
				3: name: "constant.language.anonymous-link.restructuredtext"
				4: name: "punctuation.separator.key-value.restructuredtext"
				5: name: "constant.language.anonymous-link.restructuredtext"
			patterns: [include: "#link-target-innards"]
		},{
			# Named hyperlink target: “.. _name: …”
			name:  "meta.definition.link-target.named.restructuredtext"
			begin: """(?x)
				(?: ^(\\s*) | (?!^)\\G\\s*)
				(\\.\\.) \\s+ (_)
				(
					# Phrase reference: “.. _`name`: …”
					(`) ((?:[^\\\\`]|\\\\.)*+) (`)
					|
					# Name reference:   “.. _name: …”
					(?!`)
					(
						(?: [^\\\\:]
						|   : (?!$|\\s)
						|   \\\\.
						)++
					)
				) (:) (?:$|\\s+)
			"""
			end: "^(?:(?=\\s*$)|(?!\\1[ \\t]+\\S))"
			beginCaptures:
				2: name: "punctuation.definition.directive.restructuredtext"
				3: name: "punctuation.definition.link.restructuredtext"
				4: name: "entity.name.link.restructuredtext"
				5: name: "punctuation.definition.link.begin.restructuredtext"
				6: patterns: [include: "#escape"]
				7: name: "punctuation.definition.link.end.restructuredtext"
				8: patterns: [include: "#escape"]
				9: name: "punctuation.separator.key-value.restructuredtext"
			patterns: [include: "#link-target-innards"]
		}]


	# Partial or complete segment of a link target's destination
	"link-target-innards":
		patterns: [{
			# Link reference contained by opening line: `foo-bar`_
			match: "\\G(?<=[ \\t])(?:`(?:[^\\\\`]|\\\\.)*+`|\\b(?=\\w)(?!_)(?:[-_.:+]?[A-Za-z0-9])++)_(?=\\s*$)"
			captures:
				0: patterns: [include: "#link-reference"]
		},{
			# Link reference starting on opening line `foo…\n…bar`_
			begin: "\\G(?<=[ \\t])(?=`(?:[^\\\\`]|\\\\.)*+$)"
			end: "(?!\\G)"
			patterns: [include: "#link-reference-quoted"]
		},{
			# Link reference on next line
			applyEndPatternLast: true
			begin: "\\G(?=\\s*$)"
			end: "^(\\s*(?:`(?:[^\\\\`]|\\\\.)*+`|\\b(?=\\w)(?!_)(?:[-_.:+]?[A-Za-z0-9])++)__?\\b)?|(?<=`__|`_)(?=\\s*$)"
			endCaptures:
				1: patterns: [include: "#link-reference"]
			patterns: [{
				begin: "^\\s*(?=`(?:[^\\\\`]|\\\\.)*+$)"
				end:   "(?!\\G)"
				patterns: [include: "#link-reference-quoted"]
			}]
		},{
			# Regular URI
			match: "(?:^\\s*|\\G|(?<=\\s))((?:[^\\\\\\s]|\\\\.)++)(?=$|\\s)"
			captures: 1:
				name: "constant.other.reference.link.restructuredtext"
				patterns: [include: "#escape"]
		}]


	# Inline internal link target: “_`name`”
	"link-target-inline":
		name:  "meta.definition.link-target.inline.internal.restructuredtext"
		match: "(?x)
			(?:^|(?<=[-:/'\"<\x28\\\x5B{\\s«»༺⟬⟮⸠⸡⸢⸤⸦⸨‚„‟‛])|(?<![\\x00-\\x9F])(?<=[\\p{Ps}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))
			(_)((`)(?:[^\\\\`]|\\\\.)*+)(`)
			(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}])"
		captures:
			1: name: "punctuation.definition.link.restructuredtext"
			2: name: "entity.name.link.restructuredtext"
			3: name: "punctuation.definition.link.begin.restructuredtext"
			4: name: "punctuation.definition.link.end.restructuredtext"


	# Citation reference: “[label]_”
	citation:
		name: "meta.citation.reference.restructuredtext"
		match: "(?x)
			(?:^|(?<=[-:/'\"<\x28\\\x5B{\\s«»༺⟬⟮⸠⸡⸢⸤⸦⸨‚„‟‛])|(?<![\\x00-\\x9F])(?<=[\\p{Ps}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))
			(\\[)((?=[A-Za-z])(?:[-_.:+]?[A-Za-z0-9])++)(\\])(_)
			(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}])"
		captures:
			1: name: "punctuation.definition.citation.begin.restructuredtext"
			2: name: "constant.other.reference.link.restructuredtext"
			3: name: "punctuation.definition.citation.end.restructuredtext"
			4: name: "punctuation.definition.reference.restructuredtext"


	# Citation definition: “.. [label] Details”
	"citation-definition":
		name:  "meta.citation.definition.restructuredtext"
		begin: "(?:^(\\s*)|(?!^)\\G\\s*)(\\.\\.)\\s+(\\[)((?=[A-Za-z])(?:[-_.:+]?[A-Za-z0-9])++)(\\])(?:$|\\s+)"
		end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
		beginCaptures:
			2: name: "punctuation.definition.directive.restructuredtext"
			3: name: "punctuation.definition.citation.begin.restructuredtext"
			4: name: "entity.name.citation.restructuredtext"
			5: name: "punctuation.definition.citation.end.restructuredtext"
		contentName: "string.unquoted.citation.restructuredtext"
		patterns: [include: "#all"]


	# Footnote reference
	footnote:
		match: """(?x)
			(?:^|(?<=[-:/'\"<\x28\\\x5B{\\s«»༺⟬⟮⸠⸡⸢⸤⸦⸨‚„‟‛])|(?<![\\x00-\\x9F])(?<=[\\p{Ps}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))
			(?:
				# Manually-numbered: “[0]_”
				(\\[[0-9]+\\]_)
				|
				# Auto-numbered: “[#]_” or “[#foo]_”
				(\\[\\#(?:(?=\\w)(?!_)(?:[-_.:+]?[A-Za-z0-9])++)?\\]_)
				|
				# Auto-symbol: “[*]_”
				(\\[\\*\\]_)
			)
			(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}])
		"""
		captures:
			1: name:  "meta.footnote.reference.numbered.manual.restructuredtext", patterns: [include: "#footnote-name"]
			2: name:  "meta.footnote.reference.numbered.auto.restructuredtext",   patterns: [include: "#footnote-name"]
			3: name:  "meta.footnote.reference.symbolic.auto.restructuredtext",   patterns: [include: "#footnote-name"]


	# Footnote definition
	"footnote-definition":
		name: "meta.footnote.definition.restructuredtext"
		begin: "^(\\s*)(\\.\\.)\\s+(\\[[^\\]]+\\])(?:$|\\s+)"
		end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
		beginCaptures:
			2: name: "punctuation.definition.link.restructuredtext"
			3: patterns: [include: "#footnote-name"]
		contentName: "string.unquoted.footnote.restructuredtext"
		patterns: [include: "#all"]


	# Bracketed footnote label
	"footnote-name":
		name:  "meta.footnote-name.restructuredtext"
		begin: "(?:\\G|^)\\["
		end:   "(\\])(_)?"
		contentName: "constant.other.reference.link.restructuredtext"
		beginCaptures:
			0: name: "punctuation.definition.footnote.begin.restructuredtext"
		endCaptures:
			1: name: "punctuation.definition.footnote.end.restructuredtext"
			2: name: "punctuation.definition.reference.restructuredtext"


	# Comment blocks
	comments:
		patterns: [{
			# Indented, contains text
			name:  "comment.block.double-dot.indented.has-text.restructuredtext"
			begin: "^([ \\t]+)(\\.\\.)\\s+(?=\\S)(?!\\[[^\\]]+\\](?:$|\\s))"
			end:   "(?!\\G)^(?:(?=\\S)|(?!\\1[ \\t]+\\S|\\s*$))"
			beginCaptures:
				2: name: "punctuation.definition.comment.restructuredtext"
		},{
			# Indented, no text
			name:  "comment.block.double-dot.indented.no-text.restructuredtext"
			begin: "^([ \\t]+)(\\.\\.)[ \\t]*$"
			end:   "(?!\\G)^(?:(?=\\S)|(?!\\1[ \\t]+\\S))"
			beginCaptures:
				2: name: "punctuation.definition.comment.restructuredtext"
			patterns: [{
				# Swallow blank lines
				begin: "(?<!\\G)(?<=\\S)$"
				end:   "^"
				applyEndPatternLast: yes
				patterns: [match: "^[ \\t]*$"]
			}]
		},{
			# Unindented, contains text
			name:  "comment.block.double-dot.unindented.has-text.restructuredtext"
			begin: "^(\\.\\.)\\s+(?=\\S)(?!\\[[^\\]]+\\](?:$|\\s))"
			end:   "(?!\\G)^(?=\\S)"
			beginCaptures:
				1: name: "punctuation.definition.comment.restructuredtext"
		},{
			# Unindented, no text
			name:  "comment.block.double-dot.unindented.no-text.restructuredtext"
			begin: "^(\\.\\.)[ \\t]*$"
			end:   "(?!\\G)^(?=\\S|\\s*$)"
			beginCaptures:
				1: name: "punctuation.definition.comment.restructuredtext"
			patterns: [{
				# Swallow blank lines
				begin: "(?<!\\G)(?<=\\S)$"
				end:   "^"
				applyEndPatternLast: yes
				patterns: [match: "^[ \\t]*$"]
			}]
		}]


	# Literal Blocks
	"raw-blocks":
		contentName: "meta.raw.block.restructuredtext"
		patterns: [name: "markup.raw.inner.restructuredtext", match: ".+"]
		begin: "^(?!\\s*\\.\\.\\s\\w+)(\\s*)(.*)(::)$"
		end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
		beginCaptures:
			2: patterns: [include: "#inlines"]
			3: name: "punctuation.section.raw.restructuredtext"


	# Interactive Python sessions
	doctests:
		name: "meta.doctest.restructuredtext"
		begin: "^(\\s*)(>>>)\\s+(.*)$\\n"
		end:   "^\\s*$|^(?=\\1>>> )|^(?=>>>)|^(?!\\1)\\s+\\S"
		contentName: "markup.raw.restructuredtext"
		beginCaptures:
			2: name: "punctuation.separator.prompt.doctest.restructuredtext"
			3: patterns: [include: "source.python"]


	# Tables
	tables:
		patterns: [

			# Grid tables
			{
				name: "meta.table.grid-table.restructuredtext"
				contentName: "markup.other.table.restructuredtext"
				begin: "(?=((\\+-[+-]+))|((\\+=[+=]+))\\s*$)"
				end:   "^\\s*$"
				patterns: [
					{include: "#table-borders"}
					{include: "#inlines"}
				]
			}

			# Simple tables
			{
				name: "punctuation.definition.table.simple-divider.restructuredtext"
				match: """(?x)
					^\\s*-{2,}\\s+-{2,}(?:\\s+-{2,})*\\s*$
					|
					^\\s*={2,}\\s+={2,}(?:\\s+={2,})*\\s*$
				"""
			}
		]


	# Row and column dividers
	"table-borders":
		patterns: [
			{
				begin: "\\+(?=-+(?=\\+|$))"
				end:   "(?=\\+(?=-)|$)|\\+(?=\\s|$)"
				contentName: "punctuation.definition.table.row-divider.restructuredtext"
				beginCaptures: 0: name: "punctuation.definition.table.joint.restructuredtext"
				endCaptures:   0: name: "punctuation.definition.table.joint.restructuredtext"
			}

			{
				begin: "\\+(?==+(?=\\+|$))"
				end:   "(?=\\+(?==)|$)|\\+\\s*$"
				contentName: "punctuation.definition.table.header.row-divider.restructuredtext"
				beginCaptures: 0: name: "punctuation.definition.table.joint.restructuredtext"
				endCaptures:   0: name: "punctuation.definition.table.joint.restructuredtext"
			}

			{
				match: "\\|"
				name: "punctuation.definition.table.header.column-divider.restructuredtext"
			}
		]

	# Named tag/field
	"tag-name":
		name: "entity.name.tag.restructuredtext"
		match: "(:)[A-Za-z][\\w\\s=.-]*(:)"
		captures:
			1: "name": "punctuation.definition.field.restructuredtext"
			2: "name": "punctuation.definition.field.restructuredtext"


	# Substitution reference: “|linked|_” or “|unlinked|”
	substitution:
		name: "support.variable.substitution.restructuredtext"
		match: "(?<!\\\\)(\\|)[^|]+(?<!\\\\)(\\|_{0,2})"
		captures:
			1: name: "punctuation.definition.substitution.restructuredtext"
			2: name: "punctuation.definition.substitution.restructuredtext"


	"substitution-definition":
		patterns: [

			# Image substitution – “.. |foo| image:: ./path/to/image.png”
			{
				name: "meta.substitution-definition.image.restructuredtext"
				begin: "^(\\s*)(\\.\\.)\\s(\\|)(?=\\S)([^\\|]+)((?<=\\S)\\|)\\s+(image)(::)\\s*(\\S+)"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				patterns: [include: "#image-options"]
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "punctuation.definition.substitution.start.restructuredtext"
					4: name: "entity.name.substitution.restructuredtext"
					5: name: "punctuation.definition.substitution.end.restructuredtext"
					6: name: "support.directive.restructuredtext"
					7: name: "punctuation.separator.key-value.restructuredtext"
					8: name: "constant.other.reference.link.restructuredtext"
			}


			# Generic/custom definition – “.. |foo| something else:: …”
			{
				name: "meta.substitution-definition.restructuredtext"
				begin: "^(\\s*)(\\.\\.)\\s(\\|)(?=\\S)([^\\|]+)((?<=\\S)\\|)\\s+(\\S+.*(?=::))(::)(.*)"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				patterns: [include: "#directive-options"]
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "punctuation.definition.substitution.start.restructuredtext"
					4: name: "entity.name.substitution.restructuredtext"
					5: name: "punctuation.definition.substitution.end.restructuredtext"
					6: name: "support.directive.restructuredtext"
					7: name: "punctuation.separator.key-value.restructuredtext"
					8: name: "string.unquoted.substitution.data.restructuredtext", patterns: [include: "#inlines"]
			}
		]


	# Interpreted text role
	role:
		name: "meta.interpreted-role.restructuredtext"
		begin: "(?x)
			(?:^|(?<=[-:/'\"<\x28\\\x5B{\\s«»༺⟬⟮⸠⸡⸢⸤⸦⸨‚„‟‛])|(?<![\\x00-\\x9F])(?<=[\\p{Ps}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))
			((:)\\w+(?:[-_.:+]\\w+)*+(:))
			(?=`(?=\\S)(?!`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}])))"
		end: "(?!\\G)"
		beginCaptures:
			1: name: "keyword.operator.role.restructuredtext"
			2: name: "punctuation.definition.role.name.begin.restructuredtext"
			3: name: "punctuation.definition.role.name.end.restructuredtext"
		patterns: [{
			begin: "\\G`"
			end:   "`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}])"
			beginCaptures: 0: name: "punctuation.definition.role.body.begin.restructuredtext"
			endCaptures:   0: name: "punctuation.definition.role.body.end.restructuredtext"
			patterns: [
				{include: "#role-abbr"}
				{include: "#role-code"}
				{include: "#role-command"}
				{include: "#role-dfn"}
				{include: "#role-emphasis"}
				{include: "#role-file"}
				{include: "#role-guilabel"}
				{include: "#role-html"}
				{include: "#role-kbd"}
				{include: "#role-literal"}
				{include: "#role-mailheader"}
				{include: "#role-makevar"}
				{include: "#role-manpage"}
				{include: "#role-math"}
				{include: "#role-mimetype"}
				{include: "#role-newsgroup"}
				{include: "#role-numref"}
				{include: "#role-pep"}
				{include: "#role-ref"}
				{include: "#role-regexp"}
				{include: "#role-rfc"}
				{include: "#role-samp"}
				{include: "#role-strong"}
				{include: "#role-subscript"}
				{include: "#role-superscript"}
				{include: "#role-term"}
				{include: "#role-titleref"}
				{include: "#role-other"}
			]
		}]


	# Abbreviation — “:abbr:`FAQ (Frequently Asked Questions)`”
	"role-abbr":
		patterns: [{
			# Sphinx's `:abbr:` role
			begin: "(?i)(?<=:abbr:`)\\G"
			end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
			patterns: [
				{include: "#escape"}
				{
					# The abbreviated text
					name:  "meta.abbreviation.restructuredtext"
					begin: "\\G\\s*"
					end:   "(?=\\s*(?:\\(|`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}])))"
					contentName: "constant.other.abbreviation.restructuredtext"
					patterns: [include: "#escape"]
				}
				{
					# The meaning of the abbreviation, enclosed in brackets
					name:  "meta.explanation.restructuredtext"
					begin: "\\("
					end:   "(\\))|((?:[^\\x29`]|\\.)*+)(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
					contentName: "string.quoted.brackets.restructuredtext"
					beginCaptures:
						0: name: "punctuation.definition.string.begin.restructuredtext"
					endCaptures:
						1: name: "punctuation.definition.string.end.restructuredtext"
						2: name: "invalid.illegal.unclosed-parenthetical.restructuredtext"
					patterns: [include: "#escape"]
				}
			]
		},{
			# Docutils's default “:abbreviation:” and “:acronym:” roles, neither of which expose the “explanation”
			# attribute of the doctree node (see https://docutils.sourceforge.io/docs/ref/doctree.html#examples).
			name:  "meta.abbreviation.restructuredtext"
			begin: "(?i)(?<=:abbreviation:`|:acronym:`|:a[bc]:`)\\G"
			end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
			contentName: "constant.other.abbreviation.restructuredtext"
			patterns: [include: "#escape"]
		}]


	# Inline code
	"role-code":
		name:  "markup.raw.code.monospace.literal.restructuredtext"
		begin: "(?i)(?<=:code:`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#escape"]


	# Command or program name, displayed in a monospaced bold face
	"role-command":
		name:  "markup.bold.${1:/downcase}.restructuredtext"
		begin: "(?i)(?<=:(command|program):`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#escape"]


	# Defining instance of a term
	"role-dfn":
		name:  "markup.italic.definition.restructuredtext"
		begin: "(?i)(?<=:dfn:`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#escape"]


	# Emphasised text, usually rendered in italics
	"role-emphasis":
		name:  "markup.italic.emphasis.restructuredtext"
		begin: "(?i)(?<=:emphasis:`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#escape"]


	# Filename or directory
	"role-file":
		name:  "meta.link-destination.filename.restructuredtext"
		begin: "(?i)(?<=:file:`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		contentName: "constant.other.reference.link.restructuredtext"
		patterns: [
			{include: "#escape"}
			{include: "#role-variable"}
		]


	# Label for an interactive component
	"role-guilabel":
		name: "string.other.ui-label.restructuredtext"
		begin: "(?xi)
			(?: (?<=:guilabel:`)
			|   (?<=:menuselection:`)
			) \\G"
		end: "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [{
			# Literal ampersand: “&&”
			name: "constant.character.escape.ampersand.restructuredtext"
			match: "&&"
		},{
			# Menu accelerator: “&File”
			name: "meta.accelerator.restructuredtext"
			match: "(&)([^\\\\`]|(\\\\`))"
			captures:
				1: name: "keyword.operator.menu.accelerator.restructuredtext"
				2: name: "string.other.link.restructuredtext"
				3: patterns: [include: "#escape"]
		},{
			# Menu level separator: “Start --> Programs”
			name: "keyword.operator.menu.separator.restructuredtext"
			match: "-->"
		}, include: "#escape"]


	# Embedded HTML markup
	"role-html":
		name: "text.embedded.html.basic"
		begin: "(?xi)
			(?: (?<=:html:`)
			|   (?<=:raw-html:`)
			) \\G"
		end: "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "text.html.basic"]


	# Keystrokes
	"role-kbd":
		name:  "meta.keystrokes.restructuredtext"
		begin: "(?i)(?<=:kbd:`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [{
			name:  "meta.separator.combinator.restructuredtext"
			match: "[-+^]"
		},{
			name:  "entity.name.tag.keystroke.restructuredtext"
			match: "(?xi)
				(?:\\G|(?<=[-+^\\s`]))
				( caps   \\s+ lock
				| page   \\s+ down
				| page   \\s+ up
				| scroll \\s+ lock
				| num    \\s+ lock
				| sys    \\s+ rq
				| back   \\s+ space
				| ((?:[^-+^\\s\\\\`]|\\\\.)++)
				) (?=$|[-+^\\s`])"
			captures:
				1: name: "markup.inserted.keystroke.restructuredtext" # HACK
				2: patterns: [include: "#escape"]
		}]


	# Literal text, which isn't necessarily source code
	"role-literal":
		name:  "markup.raw.monospace.literal.restructuredtext"
		begin: "(?i)(?<=:literal:`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#escape"]


	# RFC 822-style mail header
	"role-mailheader":
		name:  "markup.italic.mail-header.restructuredtext"
		begin: "(?i)(?<=:mailheader:`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#escape"]


	# make(1) variable
	"role-makevar":
		name:  "markup.bold.make-variable.restructuredtext"
		begin: "(?i)(?<=:makevar:`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#escape"]


	# Manpage reference – :manpage:`ls(1)`
	"role-manpage":
		name:  "meta.manpage.link.inline.restructuredtext"
		begin: "(?i)(?<=:manpage:`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [
			{include: "hidden.manref"}
			{
				# Copied from above grammar; see `manref.cson` at Alhadis/language-roff@6f08acf
				match: "([-.\\w]+)(\\()(\\d+(?!\\d)|(?:[lnop]|tcl)(?=[/\\)]))([\\w:/]*?(?:/(?!/)[-\\w:./]+)?)(\\))"
				captures:
					1: name: "markup.bold.manpage-name.restructuredtext"
					2: name: "punctuation.section.round.bracket.begin.restructuredtext"
					3: name: "constant.language.manpage-section.restructuredtext"
					4: name: "constant.language.manpage-group.restructuredtext"
					5: name: "punctuation.section.round.bracket.end.restructuredtext"
			}
		]


	# Inline mathematical expression – :math:`1 + 2`
	"role-math":
		name:  "markup.math.inline.restructuredtext"
		begin: "(?i)(?<=:math:`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "text.tex#math"]


	# MIME content-type, presumably conforming to RFC 6838
	"role-mimetype":
		name:  "markup.italic.mime-type.restructuredtext"
		begin: "(?i)(?<=:mimetype:`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#escape"]


	# Name of a Usenet newsgroup
	"role-newsgroup":
		name:  "markup.italic.newsgroup.link.restructuredtext"
		begin: "(?i)(?<=:newsgroup:`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#escape"]


	# Link to a referenced figure, section, table or code-block
	"role-numref":
		name:  "meta.numref.restructuredtext"
		begin: "(?i)(?<=:numref:`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#link"]


	# Link to a Python Enhancement Proposal (PEP)
	"role-pep":
		begin: "(?xi)
			(?: (?<= :pep:`)
			|   (?<= :pep-reference:`)
			) \\G"
		end: "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [{
			# Valid integer
			match: "\\G(\\d+)(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
			captures:
				0: name: "constant.numeric.pep-number.restructuredtext"
				1: name: "markup.underline.link.pep.$1.hyperlink.restructuredtext"
		},{
			# Some weird junk
			name: "invalid.illegal.bad-integer.restructuredtext"
			match: "[^`]+"
		}]


	# Roles for linking and cross-referencing resources
	"role-ref":
		begin: "(?xi)
			(?: (?<=:ref:`)
			|   (?<=:doc:`)
			|   (?<=:download:`)
			) \\G"
		end: "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#link"]


	# Regular expression literal, sans pickets
	"role-regexp":
		name:  "string.regexp.restructuredtext"
		begin: "(?i)(?<=:regexp:`)\\G"
		end: "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [
			{include: "source.regexp"}
			{include: "source.regexp.python"}
		]


	# Link to a Request for Comments (RFC)
	"role-rfc":
		begin: "(?xi)
			(?: (?<= :rfc:`)
			|   (?<= :rfc-reference:`)
			) \\G"
		end: "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [{
			# Valid integer
			match: "\\G(\\d+)(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
			captures:
				0: name: "constant.numeric.rfc-number.restructuredtext"
				1: name: "markup.underline.link.rfc.$1.hyperlink.restructuredtext"
		},{
			# Some weird junk
			name: "invalid.illegal.bad-integer.restructuredtext"
			match: "[^`]+"
		}]


	# Literal text, typically representing a command's syntax or a user's input
	"role-samp":
		name:  "markup.raw.monospace.literal.samp.restructuredtext"
		begin: "(?i)(?<=:samp:`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [
			{include: "#escape"}
			{include: "#role-variable"}
		]


	# Strongly emphasised text, usually rendered in bold
	"role-strong":
		name:  "markup.bold.emphasis.strong.restructuredtext"
		begin: "(?i)(?<=:strong:`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#escape"]


	# Subscripted text
	"role-subscript":
		name: "markup.subscript.restructuredtext"
		begin: "(?xi)
			(?: (?<=:sub:`)
			|   (?<=:subscript:`)
			) \\G"
		end: "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#escape"]


	# Superscripted text
	"role-superscript":
		name: "markup.superscript.restructuredtext"
		begin: "(?xi)
			(?: (?<=:sup:`)
			|   (?<=:superscript:`)
			) \\G"
		end: "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#escape"]


	# References to various symbols and term definitions
	"role-term":
		name: "variable.parameter.reference.restructuredtext"
		begin: "(?xi)
			(?: (?<=:term:`)
			|   (?<=:envvar:`)
			|   (?<=:keyword:`)
			|   (?<=:option:`)
			|   (?<=:token:`)
			) \\G"
		end: "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#escape"]


	# Title of a referenced creative work
	"role-titleref":
		name: "markup.italic.title-reference.restructuredtext"
		begin: "(?xi)
			(?: (?<= :t:`)
			|   (?<= :title:`)
			|   (?<= :title-reference:`)
			) \\G"
		end: "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#escape"]


	# Fallback for any text role we don't recognise
	"role-other":
		name:  "string.interpolated.restructuredtext"
		begin: "(?<=:`)\\G"
		end:   "(?=`(?=$|[-.,:;!?\\\\/'\"\x29\\\x5D}>\\s«»༻⟭⟯⸡⸠⸣⸥⸧⸩‚„‟‛]|(?![\\x00-\\x9F])[\\p{Pe}\\p{Pi}\\p{Pf}\\p{Pd}\\p{Po}]))"
		patterns: [include: "#escape"]


	# Bracketed sections representing “variable” components of otherwise verbatim text
	"role-variable":
		name: "meta.embedded.line.restructuredtext"
		match: "({)((?:[^\\\\}]|\\\\.)*+)(})"
		captures:
			1: name: "punctuation.section.embedded.begin.restructuredtext"
			2: name: "variable.parameter.placeholder.restructuredtext", patterns: [include: "#escape"]
			3: name: "punctuation.section.embedded.end.restructuredtext"


	directives:
		patterns: [

			# Image
			{
				name: "meta.image.restructuredtext"
				begin: "^(\\s*)(\\.\\.)\\s(image)(::)\\s*(\\S+)"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				patterns: [include: "#image-options"]
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "constant.other.reference.link.restructuredtext"
			}

			# Figure
			{
				name: "meta.figure.restructuredtext"
				begin: "^(\\s*)(\\.\\.)\\s(figure)(::)\\s*(\\S+)"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				patterns: [
					{include: "#image-options"}
					{include: "#all"}
				]
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "constant.other.reference.link.restructuredtext"
			}
			
			{include: "#toctree"}

			# HTML
			{
				begin: "^([ \\t]*)(\\.\\.)\\s(raw|code(?:-block)?)(::)\\s+(html)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				patterns: [include: "text.html.basic"]
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# CoffeeScript
			{
				contentName: "source.embedded.coffee"
				patterns: [include: "source.coffee"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(coffee-?script)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# JavaScript
			{
				contentName: "source.embedded.js"
				patterns: [include: "source.js"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(js|javascript)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# TypeScript
			{
				contentName: "source.embedded.ts"
				patterns: [include: "source.ts"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(typescript)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# JSON
			{
				contentName: "source.embedded.json"
				patterns: [include: "source.json"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(json)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# CSS
			{
				contentName: "source.embedded.css"
				patterns: [include: "source.css"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(css)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# XML
			{
				contentName: "source.embedded.xml"
				patterns: [include: "text.xml"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?|raw)(::)\\s+((?:pseudo)?xml)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# Ruby
			{
				contentName: "source.embedded.ruby"
				patterns: [include: "source.ruby"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(ruby)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# Java
			{
				contentName: "source.embedded.java"
				patterns: [include: "source.java"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(java)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# Erlang
			{
				contentName: "source.embedded.erlang"
				patterns: [include: "source.erlang"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(erlang)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# C-sharp/C#
			{
				contentName: "source.embedded.cs"
				patterns: [include: "source.cs"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(csharp|c#)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# PHP
			{
				contentName: "source.embedded.php"
				patterns: [include: "source.php"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(php[3-5]?)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# Shell
			{
				contentName: "source.embedded.shell"
				patterns: [include: "source.shell"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(shell|(ba|k)?sh)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# Python/Sage
			{
				contentName: "source.embedded.python"
				patterns: [include: "source.python"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(py(thon)?|sage)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# IPython
			{
				contentName: "source.embedded.python"
				patterns: [include: "source.python"]
				begin: "^([ \\t]*)(\\.\\.)\\s(ipython)(::)\\s+(py(thon)?)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# Stata
			{
				contentName: "source.embedded.stata"
				patterns: [include: "source.stata"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(stata)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# SAS
			{
				contentName: "source.embedded.python"
				patterns: [include: "source.python"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(sas)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# Objective-C
			{
				contentName: "source.embedded.objc"
				patterns: [include: "source.objc"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(objective-?c|obj-?c)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}

			# YAML
			{
				contentName: "source.embedded.yaml"
				patterns: [include: "source.yaml"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?)(::)\\s+(yaml)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}
			
			# Roff
			{
				contentName: "text.embedded.roff"
				patterns: [{
					match: "(?:^|\\G)[ \\t]*(\\S.*)"
					captures:
						1: patterns: [include: "text.roff"]
				}]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?|raw)(::)\\s+(manpage|man|[ntg]?roff)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}
			
			# LaTeX
			{
				contentName: "text.embedded.tex.latex"
				patterns: [include: "text.tex.latex"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?|raw)(::)\\s+((?:xe)?(?:la)?tex)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}
			
			# Texinfo
			{
				contentName: "text.embedded.texinfo"
				patterns: [include: "text.texinfo"]
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?|raw)(::)\\s+(texinfo)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}
			
			# Verbatim text, or an unrecognised format
			{
				contentName: "markup.raw.inner.restructuredtext"
				begin: "^([ \\t]*)(\\.\\.)\\s(code(?:-block)?|raw)(::)(?:\\s+([-\\w]+))?\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
			}
			
			# Parsed (unquoted) literal text
			{
				contentName: "markup.raw.inner.parsed.restructuredtext"
				begin: "^([ \\t]*)(\\.\\.)\\s(parsed-literal)(::)(?:\\s+([-\\w]+))?\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "entity.name.directive.restructuredtext"
				patterns: [include: "#inlines"]
			}

			# Math
			{
				name: "source.embedded.latex"
				contentName: "markup.math.block.restructuredtext"
				patterns: [include: "text.tex#math"]
				begin: "^([ \\t]*)(\\.\\.)\\s(math)(::)\\s*$"
				end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
			}

			# Command-line option
			{
				name: "meta.option.directive.restructuredtext"
				match: "^\\s*(\\.\\.)\\s(option)(::)\\s*(.+)?$"
				captures:
					1: name: "punctuation.definition.directive.restructuredtext"
					2: name: "support.directive.restructuredtext"
					3: name: "punctuation.separator.key-value.restructuredtext"
					4: patterns: [
						{match: "<|>",        name: "punctuation.definition.bracket.angle.restructuredtext"}
						{match: ",",          name: "punctuation.delimiter.comma.restructuredtext"}
						{match: "[^\\s<>,]+", name: "entity.name.directive.restructuredtext"}
					]
			}

			# Directives
			{
				name: "meta.other.directive.restructuredtext"
				match: "^\\s*(\\.\\.)\\s([A-z][-A-z0-9_]+)(::)\\s*$"
				captures:
					1: name: "punctuation.definition.directive.restructuredtext"
					2: name: "support.directive.restructuredtext"
					3: name: "punctuation.separator.key-value.restructuredtext"
			}


			# Directives with arguments
			{
				name: "meta.other.directive.restructuredtext"
				match: "^\\s*(\\.\\.)\\s([A-z][-A-z0-9_]+)(::)\\s+(.+?)\\s*$"
				captures:
					1: name: "punctuation.definition.directive.restructuredtext"
					2: name: "support.directive.restructuredtext"
					3: name: "punctuation.separator.key-value.restructuredtext"
					4: name: "entity.name.directive.restructuredtext"
			}
		]


	# Optional :attribute: statements found underneath some directives
	"directive-options":
		patterns: [
			name: "meta.directive-option.restructuredtext"
			match: "(:[^:]+:)\\s*(.*)"
			captures:
				1: patterns: [include: "#tag-name"]
				2: name: "string.other.tag-value.restructuredtext"
		]


	# Image parameters (width/height, etc)
	"image-options":
		patterns: [

			# Alt text
			{
				name: "meta.image-option.alt.restructuredtext"
				match: "(:alt:)\\s*(.*)"
				captures:
					1: patterns: [include: "#tag-name"]
					2: name: "string.other.tag-value.restructuredtext"
			}

			# Height
			{
				name: "meta.image-option.height.restructuredtext"
				match: "(:height:)\\s*(.*)"
				captures:
					1: patterns: [include: "#tag-name"]
					2: patterns: [include: "#length"]
			}

			# Width
			{
				name: "meta.image-option.width.restructuredtext"
				match: "(:width:)\\s*(.*)"
				captures:
					1: patterns: [include: "#tag-name"]
					2: patterns: [include: "#length"]
			}

			# Scale
			{
				name: "meta.image-option.scale.restructuredtext"
				match: "(:scale:)\\s*(.*)"
				captures:
					1: patterns: [include: "#tag-name"]
					2: patterns: [include: "#length"]
			}

			# Align
			{
				name: "meta.image-option.align.restructuredtext"
				match: "(:align:)\\s*(?:(top|middle|bottom|left|center|right)\\b)?"
				captures:
					1: patterns: [include: "#tag-name"]
					2: name: "keyword.language.image-alignment.restructuredtext"
			}

			# Target
			{
				name: "meta.image-option.target.restructuredtext"
				match: "(:target:)\\s*(.*)?"
				captures:
					1: patterns: [include: "#tag-name"]
					2: name: "string.other.target.restructuredtext"
			}

			{include: "#doctree-options"}
			{include: "#directive-options"}
		]



	# Common Doctree options
	# See: http://docutils.sourceforge.net/docs/ref/rst/directives.html#id17
	"doctree-options":
		patterns: [

			# Classes
			{
				name: "meta.doctree-option.class.restructuredtext"
				match: "(:class:)\\s*(.*)"
				captures:
					1: patterns: [include: "#tag-name"]
					2: name: "string.other.class-list.restructuredtext"
			}

			# Name
			{
				name: "meta.doctree-option.name.restructuredtext"
				match: "(:name:)\\s*(.*)"
				captures:
					1: patterns: [include: "#tag-name"]
					2: name: "string.other.name.restructuredtext"
			}
		]


	# Sphinx domains
	domains:
		patterns: [

			# Python domain
			{
				name: "meta.sphinx-domain.restructuredtext"
				contentName: "source.embedded.python"
				begin: "^(\\s*)(\\.\\.)\\s+(py)(:)([^:]+)(::)"
				end:   "^(?!\\s*$|\\1[ \\t]{6,}\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "support.directive.restructuredtext"
					6: name: "punctuation.separator.key-value.restructuredtext"
				patterns: [
					{
						# Hack to stop runaway issues with backslashes
						match: "(?:\\G|^)([^(]*)(\\()([^\\\\)]*\\\\[^)]*)(\\))"
						captures:
							1: patterns: [include: "source.python"]
							2: name: "punctuation.parenthesis.begin.python"
							3: patterns: [
								{match: "\\\\.", name: "constant.character.escape.restructuredtext"}
								{include: "source.python"}
							]
							4: name: "punctuation.parenthesis.end.python"
					}
					{ include: "source.python" }
				]
			}


			# C domain
			{
				name: "meta.sphinx-domain.restructuredtext"
				contentName: "source.embedded.c"
				patterns: [include: "source.c"]
				begin: "^(\\s*)(\\.\\.)\\s+(c)(:)([^:]+)(::)"
				end:   "^(?!\\s*$|\\1[ \\t]{5,}\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "support.directive.restructuredtext"
					6: name: "punctuation.separator.key-value.restructuredtext"
			}


			# C++ domain
			{
				name: "meta.sphinx-domain.restructuredtext"
				begin: "^(\\s*)(\\.\\.)\\s+(cpp)(::?)([^:]+)(::)"
				end:   "^(?!\\s*$|\\1[ \\t]{5,}\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "support.directive.restructuredtext"
					6: name: "punctuation.separator.key-value.restructuredtext"

				# This is a hack to stop C++ syntax spilling out of control
				patterns: [
					match: "(.+)(\\\\?)$"
					captures:
						1: name: "source.embedded.cpp", patterns: [include: "source.cpp"]
						2: name: "constant.character.escape.newline.restructuredtext"
				]
			}


			# JavaScript domain
			{
				name: "meta.sphinx-domain.restructuredtext"
				begin: "^(\\s*)(\\.\\.)\\s+(js)(:)([^:]+)(::)"
				end:   "^(?!\\s*$|\\1[ \\t]{5,}\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "support.directive.restructuredtext"
					6: name: "punctuation.separator.key-value.restructuredtext"

				# JS syntax might go haywire too: expect its grammar to change at any time
				patterns: [
					match: "(.+)(\\\\?)$"
					captures:
						1: name: "source.embedded.js", patterns: [include: "source.js"]
						2: name: "constant.character.escape.newline.restructuredtext"
				]
			}


			# Anything else
			{
				name: "meta.sphinx-domain.restructuredtext"
				contentName: "string.unquoted.domain.restructuredtext"
				begin: "^(\\s*)(\\.\\.)\\s+([^:]+)(::?)([^:]+)(::)"
				end:   "^(?!\\s*$|\\1[ \\t]{5,}\\S)"
				beginCaptures:
					2: name: "punctuation.definition.directive.restructuredtext"
					3: name: "support.directive.restructuredtext"
					4: name: "punctuation.separator.key-value.restructuredtext"
					5: name: "support.directive.restructuredtext"
					6: name: "punctuation.separator.key-value.restructuredtext"
			}
	]


	# Table of contents
	toctree:
		name:  "meta.toctree.restructuredtext"
		begin: "^(\\s*)(\\.\\.)\\s(toctree)(::)(?=\\s*$)"
		end:   "^(?!\\s*$|\\1[ \\t]+\\S)"
		beginCaptures:
			2: name: "punctuation.definition.directive.restructuredtext"
			3: name: "support.directive.restructuredtext"
			4: name: "punctuation.separator.key-value.restructuredtext"
		patterns: [{
			# Leading options
			name:  "meta.field-list.restructuredtext"
			begin: "(?<=::)\\G"
			end:   "^(?=[ \\t]*$)"
			patterns: [
				{include: "#toctree-caption"}
				{include: "#toctree-depth"}
				{include: "#doctree-options"}
				{include: "#directive-options"}
			]
		},{
			# Page entry: “Description <filename>”
			name: "meta.entry.restructuredtext"
			match: "^\\s+(?!\\G)(\\S.*?)\\s+(<.*?>)[ \\s]*$"
			captures:
				1: name: "markup.list.description.restructuredtext"
				2: patterns: [include: "#toctree-target"]
		},{
			# Page entry: “filename-and-description”
			name: "meta.entry.restructuredtext"
			match: "^\\s+(?!\\G)(\\S.*?)[ \\s]*$"
			captures:
				1: patterns: [include: "#toctree-target"]
		}]


	# Caption for table of contents
	"toctree-caption":
		name:  "meta.toctree-option.caption.restructuredtext"
		begin: "(:caption:)\\s+(?=\\S)"
		end:   "$"
		beginCaptures:
			1: patterns: [include: "#tag-name"]
		contentName: "string.unquoted.caption.restructuredtext"


	# Minimum or maximum depth to traverse a hierarchical list
	"toctree-depth":
		name:  "meta.toctree-option.$2.restructuredtext"
		begin: "(:((?:min|max)depth):)\\s+"
		end:   "$"
		beginCaptures:
			1: patterns: [include: "#tag-name"]
		patterns: [{
			# Valid, base-10 integer
			name: "constant.numeric.integer.restructuredtext"
			match: "\\G-?\\d+(?=\\s*$)"
		},{
			# Unexpected junk
			name: "invalid.illegal.bad-integer.restructuredtext"
			match: "\\G(\\S.+?)(?=\\s*$)"
		}]


	# Cross-reference destination
	# https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#cross-referencing-syntax
	"toctree-target":
		patterns: [{
			match: "(?:^|\\G)(<)(.*)(>)$"
			captures:
				1: name: "punctuation.definition.angle.bracket.begin.restructuredtext"
				2: patterns: [include: "#toctree-target"]
				3: name: "punctuation.definition.angle.bracket.end.restructuredtext"
		},{
			match: "(?:^|\\G)(?:(!)|(~))?(?!<)((.+))(?<!<)$"
			captures:
				1: name: "keyword.operator.suppress-reference.restructuredtext"
				2: name: "keyword.operator.last-component-only.restructuredtext"
				3: name: "string.other.link.destination.restructuredtext"
				4: patterns: [{
					name: "keyword.operator.glob.wildcard.restructuredtext"
					match: "\\*"
				}]
		}]
